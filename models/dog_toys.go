// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DogToy is an object representing the database table.
type DogToy struct {
	DogID int `boil:"dog_id" json:"dog_id" toml:"dog_id" yaml:"dog_id"`
	ToyID int `boil:"toy_id" json:"toy_id" toml:"toy_id" yaml:"toy_id"`

	R *dogToyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dogToyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DogToyColumns = struct {
	DogID string
	ToyID string
}{
	DogID: "dog_id",
	ToyID: "toy_id",
}

var DogToyTableColumns = struct {
	DogID string
	ToyID string
}{
	DogID: "dog_toys.dog_id",
	ToyID: "dog_toys.toy_id",
}

// Generated where

var DogToyWhere = struct {
	DogID whereHelperint
	ToyID whereHelperint
}{
	DogID: whereHelperint{field: "`dog_toys`.`dog_id`"},
	ToyID: whereHelperint{field: "`dog_toys`.`toy_id`"},
}

// DogToyRels is where relationship names are stored.
var DogToyRels = struct {
}{}

// dogToyR is where relationships are stored.
type dogToyR struct {
}

// NewStruct creates a new relationship struct
func (*dogToyR) NewStruct() *dogToyR {
	return &dogToyR{}
}

// dogToyL is where Load methods for each relationship are stored.
type dogToyL struct{}

var (
	dogToyAllColumns            = []string{"dog_id", "toy_id"}
	dogToyColumnsWithoutDefault = []string{"dog_id", "toy_id"}
	dogToyColumnsWithDefault    = []string{}
	dogToyPrimaryKeyColumns     = []string{"dog_id", "toy_id"}
	dogToyGeneratedColumns      = []string{}
)

type (
	// DogToySlice is an alias for a slice of pointers to DogToy.
	// This should almost always be used instead of []DogToy.
	DogToySlice []*DogToy
	// DogToyHook is the signature for custom DogToy hook methods
	DogToyHook func(context.Context, boil.ContextExecutor, *DogToy) error

	dogToyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dogToyType                 = reflect.TypeOf(&DogToy{})
	dogToyMapping              = queries.MakeStructMapping(dogToyType)
	dogToyPrimaryKeyMapping, _ = queries.BindMapping(dogToyType, dogToyMapping, dogToyPrimaryKeyColumns)
	dogToyInsertCacheMut       sync.RWMutex
	dogToyInsertCache          = make(map[string]insertCache)
	dogToyUpdateCacheMut       sync.RWMutex
	dogToyUpdateCache          = make(map[string]updateCache)
	dogToyUpsertCacheMut       sync.RWMutex
	dogToyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dogToyAfterSelectMu sync.Mutex
var dogToyAfterSelectHooks []DogToyHook

var dogToyBeforeInsertMu sync.Mutex
var dogToyBeforeInsertHooks []DogToyHook
var dogToyAfterInsertMu sync.Mutex
var dogToyAfterInsertHooks []DogToyHook

var dogToyBeforeUpdateMu sync.Mutex
var dogToyBeforeUpdateHooks []DogToyHook
var dogToyAfterUpdateMu sync.Mutex
var dogToyAfterUpdateHooks []DogToyHook

var dogToyBeforeDeleteMu sync.Mutex
var dogToyBeforeDeleteHooks []DogToyHook
var dogToyAfterDeleteMu sync.Mutex
var dogToyAfterDeleteHooks []DogToyHook

var dogToyBeforeUpsertMu sync.Mutex
var dogToyBeforeUpsertHooks []DogToyHook
var dogToyAfterUpsertMu sync.Mutex
var dogToyAfterUpsertHooks []DogToyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DogToy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DogToy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DogToy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DogToy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DogToy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DogToy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DogToy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DogToy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DogToy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dogToyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDogToyHook registers your hook function for all future operations.
func AddDogToyHook(hookPoint boil.HookPoint, dogToyHook DogToyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dogToyAfterSelectMu.Lock()
		dogToyAfterSelectHooks = append(dogToyAfterSelectHooks, dogToyHook)
		dogToyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dogToyBeforeInsertMu.Lock()
		dogToyBeforeInsertHooks = append(dogToyBeforeInsertHooks, dogToyHook)
		dogToyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dogToyAfterInsertMu.Lock()
		dogToyAfterInsertHooks = append(dogToyAfterInsertHooks, dogToyHook)
		dogToyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dogToyBeforeUpdateMu.Lock()
		dogToyBeforeUpdateHooks = append(dogToyBeforeUpdateHooks, dogToyHook)
		dogToyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dogToyAfterUpdateMu.Lock()
		dogToyAfterUpdateHooks = append(dogToyAfterUpdateHooks, dogToyHook)
		dogToyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dogToyBeforeDeleteMu.Lock()
		dogToyBeforeDeleteHooks = append(dogToyBeforeDeleteHooks, dogToyHook)
		dogToyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dogToyAfterDeleteMu.Lock()
		dogToyAfterDeleteHooks = append(dogToyAfterDeleteHooks, dogToyHook)
		dogToyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dogToyBeforeUpsertMu.Lock()
		dogToyBeforeUpsertHooks = append(dogToyBeforeUpsertHooks, dogToyHook)
		dogToyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dogToyAfterUpsertMu.Lock()
		dogToyAfterUpsertHooks = append(dogToyAfterUpsertHooks, dogToyHook)
		dogToyAfterUpsertMu.Unlock()
	}
}

// One returns a single dogToy record from the query.
func (q dogToyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DogToy, error) {
	o := &DogToy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dog_toys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DogToy records from the query.
func (q dogToyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DogToySlice, error) {
	var o []*DogToy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DogToy slice")
	}

	if len(dogToyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DogToy records in the query.
func (q dogToyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dog_toys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dogToyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dog_toys exists")
	}

	return count > 0, nil
}

// DogToys retrieves all the records using an executor.
func DogToys(mods ...qm.QueryMod) dogToyQuery {
	mods = append(mods, qm.From("`dog_toys`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`dog_toys`.*"})
	}

	return dogToyQuery{q}
}

// FindDogToy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDogToy(ctx context.Context, exec boil.ContextExecutor, dogID int, toyID int, selectCols ...string) (*DogToy, error) {
	dogToyObj := &DogToy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dog_toys` where `dog_id`=? AND `toy_id`=?", sel,
	)

	q := queries.Raw(query, dogID, toyID)

	err := q.Bind(ctx, exec, dogToyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dog_toys")
	}

	if err = dogToyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dogToyObj, err
	}

	return dogToyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DogToy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dog_toys provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dogToyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dogToyInsertCacheMut.RLock()
	cache, cached := dogToyInsertCache[key]
	dogToyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dogToyAllColumns,
			dogToyColumnsWithDefault,
			dogToyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dogToyType, dogToyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dogToyType, dogToyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dog_toys` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dog_toys` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dog_toys` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dogToyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dog_toys")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DogID,
		o.ToyID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dog_toys")
	}

CacheNoHooks:
	if !cached {
		dogToyInsertCacheMut.Lock()
		dogToyInsertCache[key] = cache
		dogToyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DogToy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DogToy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dogToyUpdateCacheMut.RLock()
	cache, cached := dogToyUpdateCache[key]
	dogToyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dogToyAllColumns,
			dogToyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dog_toys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dog_toys` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dogToyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dogToyType, dogToyMapping, append(wl, dogToyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dog_toys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dog_toys")
	}

	if !cached {
		dogToyUpdateCacheMut.Lock()
		dogToyUpdateCache[key] = cache
		dogToyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dogToyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dog_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dog_toys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DogToySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dogToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dog_toys` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dogToyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dogToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dogToy")
	}
	return rowsAff, nil
}

var mySQLDogToyUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DogToy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dog_toys provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dogToyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDogToyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dogToyUpsertCacheMut.RLock()
	cache, cached := dogToyUpsertCache[key]
	dogToyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dogToyAllColumns,
			dogToyColumnsWithDefault,
			dogToyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dogToyAllColumns,
			dogToyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert dog_toys, could not build update column list")
		}

		ret := strmangle.SetComplement(dogToyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`dog_toys`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dog_toys` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dogToyType, dogToyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dogToyType, dogToyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for dog_toys")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dogToyType, dogToyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for dog_toys")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dog_toys")
	}

CacheNoHooks:
	if !cached {
		dogToyUpsertCacheMut.Lock()
		dogToyUpsertCache[key] = cache
		dogToyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DogToy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DogToy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DogToy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dogToyPrimaryKeyMapping)
	sql := "DELETE FROM `dog_toys` WHERE `dog_id`=? AND `toy_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dog_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dog_toys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dogToyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dogToyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dog_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dog_toys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DogToySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dogToyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dogToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dog_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dogToyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dogToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dog_toys")
	}

	if len(dogToyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DogToy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDogToy(ctx, exec, o.DogID, o.ToyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DogToySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DogToySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dogToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dog_toys`.* FROM `dog_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dogToyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DogToySlice")
	}

	*o = slice

	return nil
}

// DogToyExists checks if the DogToy row exists.
func DogToyExists(ctx context.Context, exec boil.ContextExecutor, dogID int, toyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dog_toys` where `dog_id`=? AND `toy_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dogID, toyID)
	}
	row := exec.QueryRowContext(ctx, sql, dogID, toyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dog_toys exists")
	}

	return exists, nil
}

// Exists checks if the DogToy row exists.
func (o *DogToy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DogToyExists(ctx, exec, o.DogID, o.ToyID)
}
