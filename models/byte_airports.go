// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ByteAirport is an object representing the database table.
type ByteAirport struct {
	ID   []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *byteAirportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L byteAirportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ByteAirportColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var ByteAirportTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "byte_airports.id",
	Name: "byte_airports.name",
}

// Generated where

var ByteAirportWhere = struct {
	ID   whereHelper__byte
	Name whereHelpernull_String
}{
	ID:   whereHelper__byte{field: "`byte_airports`.`id`"},
	Name: whereHelpernull_String{field: "`byte_airports`.`name`"},
}

// ByteAirportRels is where relationship names are stored.
var ByteAirportRels = struct {
	ByteJets string
}{
	ByteJets: "ByteJets",
}

// byteAirportR is where relationships are stored.
type byteAirportR struct {
	ByteJets ByteJetSlice `boil:"ByteJets" json:"ByteJets" toml:"ByteJets" yaml:"ByteJets"`
}

// NewStruct creates a new relationship struct
func (*byteAirportR) NewStruct() *byteAirportR {
	return &byteAirportR{}
}

func (r *byteAirportR) GetByteJets() ByteJetSlice {
	if r == nil {
		return nil
	}
	return r.ByteJets
}

// byteAirportL is where Load methods for each relationship are stored.
type byteAirportL struct{}

var (
	byteAirportAllColumns            = []string{"id", "name"}
	byteAirportColumnsWithoutDefault = []string{"id", "name"}
	byteAirportColumnsWithDefault    = []string{}
	byteAirportPrimaryKeyColumns     = []string{"id"}
	byteAirportGeneratedColumns      = []string{}
)

type (
	// ByteAirportSlice is an alias for a slice of pointers to ByteAirport.
	// This should almost always be used instead of []ByteAirport.
	ByteAirportSlice []*ByteAirport
	// ByteAirportHook is the signature for custom ByteAirport hook methods
	ByteAirportHook func(context.Context, boil.ContextExecutor, *ByteAirport) error

	byteAirportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	byteAirportType                 = reflect.TypeOf(&ByteAirport{})
	byteAirportMapping              = queries.MakeStructMapping(byteAirportType)
	byteAirportPrimaryKeyMapping, _ = queries.BindMapping(byteAirportType, byteAirportMapping, byteAirportPrimaryKeyColumns)
	byteAirportInsertCacheMut       sync.RWMutex
	byteAirportInsertCache          = make(map[string]insertCache)
	byteAirportUpdateCacheMut       sync.RWMutex
	byteAirportUpdateCache          = make(map[string]updateCache)
	byteAirportUpsertCacheMut       sync.RWMutex
	byteAirportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var byteAirportAfterSelectMu sync.Mutex
var byteAirportAfterSelectHooks []ByteAirportHook

var byteAirportBeforeInsertMu sync.Mutex
var byteAirportBeforeInsertHooks []ByteAirportHook
var byteAirportAfterInsertMu sync.Mutex
var byteAirportAfterInsertHooks []ByteAirportHook

var byteAirportBeforeUpdateMu sync.Mutex
var byteAirportBeforeUpdateHooks []ByteAirportHook
var byteAirportAfterUpdateMu sync.Mutex
var byteAirportAfterUpdateHooks []ByteAirportHook

var byteAirportBeforeDeleteMu sync.Mutex
var byteAirportBeforeDeleteHooks []ByteAirportHook
var byteAirportAfterDeleteMu sync.Mutex
var byteAirportAfterDeleteHooks []ByteAirportHook

var byteAirportBeforeUpsertMu sync.Mutex
var byteAirportBeforeUpsertHooks []ByteAirportHook
var byteAirportAfterUpsertMu sync.Mutex
var byteAirportAfterUpsertHooks []ByteAirportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ByteAirport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ByteAirport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ByteAirport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ByteAirport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ByteAirport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ByteAirport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ByteAirport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ByteAirport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ByteAirport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range byteAirportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddByteAirportHook registers your hook function for all future operations.
func AddByteAirportHook(hookPoint boil.HookPoint, byteAirportHook ByteAirportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		byteAirportAfterSelectMu.Lock()
		byteAirportAfterSelectHooks = append(byteAirportAfterSelectHooks, byteAirportHook)
		byteAirportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		byteAirportBeforeInsertMu.Lock()
		byteAirportBeforeInsertHooks = append(byteAirportBeforeInsertHooks, byteAirportHook)
		byteAirportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		byteAirportAfterInsertMu.Lock()
		byteAirportAfterInsertHooks = append(byteAirportAfterInsertHooks, byteAirportHook)
		byteAirportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		byteAirportBeforeUpdateMu.Lock()
		byteAirportBeforeUpdateHooks = append(byteAirportBeforeUpdateHooks, byteAirportHook)
		byteAirportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		byteAirportAfterUpdateMu.Lock()
		byteAirportAfterUpdateHooks = append(byteAirportAfterUpdateHooks, byteAirportHook)
		byteAirportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		byteAirportBeforeDeleteMu.Lock()
		byteAirportBeforeDeleteHooks = append(byteAirportBeforeDeleteHooks, byteAirportHook)
		byteAirportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		byteAirportAfterDeleteMu.Lock()
		byteAirportAfterDeleteHooks = append(byteAirportAfterDeleteHooks, byteAirportHook)
		byteAirportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		byteAirportBeforeUpsertMu.Lock()
		byteAirportBeforeUpsertHooks = append(byteAirportBeforeUpsertHooks, byteAirportHook)
		byteAirportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		byteAirportAfterUpsertMu.Lock()
		byteAirportAfterUpsertHooks = append(byteAirportAfterUpsertHooks, byteAirportHook)
		byteAirportAfterUpsertMu.Unlock()
	}
}

// One returns a single byteAirport record from the query.
func (q byteAirportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ByteAirport, error) {
	o := &ByteAirport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for byte_airports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ByteAirport records from the query.
func (q byteAirportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ByteAirportSlice, error) {
	var o []*ByteAirport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ByteAirport slice")
	}

	if len(byteAirportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ByteAirport records in the query.
func (q byteAirportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count byte_airports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q byteAirportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if byte_airports exists")
	}

	return count > 0, nil
}

// ByteJets retrieves all the byte_jet's ByteJets with an executor.
func (o *ByteAirport) ByteJets(mods ...qm.QueryMod) byteJetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`byte_jets`.`byte_airport_id`=?", o.ID),
	)

	return ByteJets(queryMods...)
}

// LoadByteJets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (byteAirportL) LoadByteJets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeByteAirport interface{}, mods queries.Applicator) error {
	var slice []*ByteAirport
	var object *ByteAirport

	if singular {
		var ok bool
		object, ok = maybeByteAirport.(*ByteAirport)
		if !ok {
			object = new(ByteAirport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeByteAirport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeByteAirport))
			}
		}
	} else {
		s, ok := maybeByteAirport.(*[]*ByteAirport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeByteAirport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeByteAirport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &byteAirportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &byteAirportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`byte_jets`),
		qm.WhereIn(`byte_jets.byte_airport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load byte_jets")
	}

	var resultSlice []*ByteJet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice byte_jets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on byte_jets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for byte_jets")
	}

	if len(byteJetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ByteJets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &byteJetR{}
			}
			foreign.R.ByteAirport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ByteAirportID) {
				local.R.ByteJets = append(local.R.ByteJets, foreign)
				if foreign.R == nil {
					foreign.R = &byteJetR{}
				}
				foreign.R.ByteAirport = local
				break
			}
		}
	}

	return nil
}

// AddByteJets adds the given related objects to the existing relationships
// of the byte_airport, optionally inserting them as new records.
// Appends related to o.R.ByteJets.
// Sets related.R.ByteAirport appropriately.
func (o *ByteAirport) AddByteJets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ByteJet) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ByteAirportID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `byte_jets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"byte_airport_id"}),
				strmangle.WhereClause("`", "`", 0, byteJetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ByteAirportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &byteAirportR{
			ByteJets: related,
		}
	} else {
		o.R.ByteJets = append(o.R.ByteJets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &byteJetR{
				ByteAirport: o,
			}
		} else {
			rel.R.ByteAirport = o
		}
	}
	return nil
}

// SetByteJets removes all previously related items of the
// byte_airport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ByteAirport's ByteJets accordingly.
// Replaces o.R.ByteJets with related.
// Sets related.R.ByteAirport's ByteJets accordingly.
func (o *ByteAirport) SetByteJets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ByteJet) error {
	query := "update `byte_jets` set `byte_airport_id` = null where `byte_airport_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ByteJets {
			queries.SetScanner(&rel.ByteAirportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ByteAirport = nil
		}
		o.R.ByteJets = nil
	}

	return o.AddByteJets(ctx, exec, insert, related...)
}

// RemoveByteJets relationships from objects passed in.
// Removes related items from R.ByteJets (uses pointer comparison, removal does not keep order)
// Sets related.R.ByteAirport.
func (o *ByteAirport) RemoveByteJets(ctx context.Context, exec boil.ContextExecutor, related ...*ByteJet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ByteAirportID, nil)
		if rel.R != nil {
			rel.R.ByteAirport = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("byte_airport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ByteJets {
			if rel != ri {
				continue
			}

			ln := len(o.R.ByteJets)
			if ln > 1 && i < ln-1 {
				o.R.ByteJets[i] = o.R.ByteJets[ln-1]
			}
			o.R.ByteJets = o.R.ByteJets[:ln-1]
			break
		}
	}

	return nil
}

// ByteAirports retrieves all the records using an executor.
func ByteAirports(mods ...qm.QueryMod) byteAirportQuery {
	mods = append(mods, qm.From("`byte_airports`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`byte_airports`.*"})
	}

	return byteAirportQuery{q}
}

// FindByteAirport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindByteAirport(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*ByteAirport, error) {
	byteAirportObj := &ByteAirport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `byte_airports` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, byteAirportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from byte_airports")
	}

	if err = byteAirportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return byteAirportObj, err
	}

	return byteAirportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ByteAirport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no byte_airports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(byteAirportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	byteAirportInsertCacheMut.RLock()
	cache, cached := byteAirportInsertCache[key]
	byteAirportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			byteAirportAllColumns,
			byteAirportColumnsWithDefault,
			byteAirportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(byteAirportType, byteAirportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(byteAirportType, byteAirportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `byte_airports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `byte_airports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `byte_airports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, byteAirportPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into byte_airports")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for byte_airports")
	}

CacheNoHooks:
	if !cached {
		byteAirportInsertCacheMut.Lock()
		byteAirportInsertCache[key] = cache
		byteAirportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ByteAirport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ByteAirport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	byteAirportUpdateCacheMut.RLock()
	cache, cached := byteAirportUpdateCache[key]
	byteAirportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			byteAirportAllColumns,
			byteAirportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update byte_airports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `byte_airports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, byteAirportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(byteAirportType, byteAirportMapping, append(wl, byteAirportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update byte_airports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for byte_airports")
	}

	if !cached {
		byteAirportUpdateCacheMut.Lock()
		byteAirportUpdateCache[key] = cache
		byteAirportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q byteAirportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for byte_airports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for byte_airports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ByteAirportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), byteAirportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `byte_airports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, byteAirportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in byteAirport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all byteAirport")
	}
	return rowsAff, nil
}

var mySQLByteAirportUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ByteAirport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no byte_airports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(byteAirportColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLByteAirportUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	byteAirportUpsertCacheMut.RLock()
	cache, cached := byteAirportUpsertCache[key]
	byteAirportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			byteAirportAllColumns,
			byteAirportColumnsWithDefault,
			byteAirportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			byteAirportAllColumns,
			byteAirportPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert byte_airports, could not build update column list")
		}

		ret := strmangle.SetComplement(byteAirportAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`byte_airports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `byte_airports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(byteAirportType, byteAirportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(byteAirportType, byteAirportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for byte_airports")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(byteAirportType, byteAirportMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for byte_airports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for byte_airports")
	}

CacheNoHooks:
	if !cached {
		byteAirportUpsertCacheMut.Lock()
		byteAirportUpsertCache[key] = cache
		byteAirportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ByteAirport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ByteAirport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ByteAirport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), byteAirportPrimaryKeyMapping)
	sql := "DELETE FROM `byte_airports` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from byte_airports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for byte_airports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q byteAirportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no byteAirportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from byte_airports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for byte_airports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ByteAirportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(byteAirportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), byteAirportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `byte_airports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, byteAirportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from byteAirport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for byte_airports")
	}

	if len(byteAirportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ByteAirport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindByteAirport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ByteAirportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ByteAirportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), byteAirportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `byte_airports`.* FROM `byte_airports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, byteAirportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ByteAirportSlice")
	}

	*o = slice

	return nil
}

// ByteAirportExists checks if the ByteAirport row exists.
func ByteAirportExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `byte_airports` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if byte_airports exists")
	}

	return exists, nil
}

// Exists checks if the ByteAirport row exists.
func (o *ByteAirport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ByteAirportExists(ctx, exec, o.ID)
}
