// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventThree is an object representing the database table.
type EventThree struct {
	ID   uint64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String        `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Face EventThreeNullFace `boil:"face" json:"face,omitempty" toml:"face" yaml:"face,omitempty"`
	Mood EventThreeNullMood `boil:"mood" json:"mood,omitempty" toml:"mood" yaml:"mood,omitempty"`
	Day  EventThreeNullDay  `boil:"day" json:"day,omitempty" toml:"day" yaml:"day,omitempty"`

	R *eventThreeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventThreeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventThreeColumns = struct {
	ID   string
	Name string
	Face string
	Mood string
	Day  string
}{
	ID:   "id",
	Name: "name",
	Face: "face",
	Mood: "mood",
	Day:  "day",
}

var EventThreeTableColumns = struct {
	ID   string
	Name string
	Face string
	Mood string
	Day  string
}{
	ID:   "event_three.id",
	Name: "event_three.name",
	Face: "event_three.face",
	Mood: "event_three.mood",
	Day:  "event_three.day",
}

// Generated where

type whereHelperEventThreeNullFace struct{ field string }

func (w whereHelperEventThreeNullFace) EQ(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperEventThreeNullFace) NEQ(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperEventThreeNullFace) LT(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperEventThreeNullFace) LTE(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperEventThreeNullFace) GT(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperEventThreeNullFace) GTE(x EventThreeNullFace) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperEventThreeNullFace) IN(slice []EventThreeNullFace) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperEventThreeNullFace) NIN(slice []EventThreeNullFace) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperEventThreeNullFace) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperEventThreeNullFace) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperEventThreeNullMood struct{ field string }

func (w whereHelperEventThreeNullMood) EQ(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperEventThreeNullMood) NEQ(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperEventThreeNullMood) LT(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperEventThreeNullMood) LTE(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperEventThreeNullMood) GT(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperEventThreeNullMood) GTE(x EventThreeNullMood) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperEventThreeNullMood) IN(slice []EventThreeNullMood) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperEventThreeNullMood) NIN(slice []EventThreeNullMood) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperEventThreeNullMood) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperEventThreeNullMood) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperEventThreeNullDay struct{ field string }

func (w whereHelperEventThreeNullDay) EQ(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperEventThreeNullDay) NEQ(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperEventThreeNullDay) LT(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperEventThreeNullDay) LTE(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperEventThreeNullDay) GT(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperEventThreeNullDay) GTE(x EventThreeNullDay) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperEventThreeNullDay) IN(slice []EventThreeNullDay) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperEventThreeNullDay) NIN(slice []EventThreeNullDay) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperEventThreeNullDay) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperEventThreeNullDay) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var EventThreeWhere = struct {
	ID   whereHelperuint64
	Name whereHelpernull_String
	Face whereHelperEventThreeNullFace
	Mood whereHelperEventThreeNullMood
	Day  whereHelperEventThreeNullDay
}{
	ID:   whereHelperuint64{field: "`event_three`.`id`"},
	Name: whereHelpernull_String{field: "`event_three`.`name`"},
	Face: whereHelperEventThreeNullFace{field: "`event_three`.`face`"},
	Mood: whereHelperEventThreeNullMood{field: "`event_three`.`mood`"},
	Day:  whereHelperEventThreeNullDay{field: "`event_three`.`day`"},
}

// EventThreeRels is where relationship names are stored.
var EventThreeRels = struct {
}{}

// eventThreeR is where relationships are stored.
type eventThreeR struct {
}

// NewStruct creates a new relationship struct
func (*eventThreeR) NewStruct() *eventThreeR {
	return &eventThreeR{}
}

// eventThreeL is where Load methods for each relationship are stored.
type eventThreeL struct{}

var (
	eventThreeAllColumns            = []string{"id", "name", "face", "mood", "day"}
	eventThreeColumnsWithoutDefault = []string{"name", "face", "mood", "day"}
	eventThreeColumnsWithDefault    = []string{"id"}
	eventThreePrimaryKeyColumns     = []string{"id"}
	eventThreeGeneratedColumns      = []string{}
)

type (
	// EventThreeSlice is an alias for a slice of pointers to EventThree.
	// This should almost always be used instead of []EventThree.
	EventThreeSlice []*EventThree
	// EventThreeHook is the signature for custom EventThree hook methods
	EventThreeHook func(context.Context, boil.ContextExecutor, *EventThree) error

	eventThreeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventThreeType                 = reflect.TypeOf(&EventThree{})
	eventThreeMapping              = queries.MakeStructMapping(eventThreeType)
	eventThreePrimaryKeyMapping, _ = queries.BindMapping(eventThreeType, eventThreeMapping, eventThreePrimaryKeyColumns)
	eventThreeInsertCacheMut       sync.RWMutex
	eventThreeInsertCache          = make(map[string]insertCache)
	eventThreeUpdateCacheMut       sync.RWMutex
	eventThreeUpdateCache          = make(map[string]updateCache)
	eventThreeUpsertCacheMut       sync.RWMutex
	eventThreeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventThreeAfterSelectMu sync.Mutex
var eventThreeAfterSelectHooks []EventThreeHook

var eventThreeBeforeInsertMu sync.Mutex
var eventThreeBeforeInsertHooks []EventThreeHook
var eventThreeAfterInsertMu sync.Mutex
var eventThreeAfterInsertHooks []EventThreeHook

var eventThreeBeforeUpdateMu sync.Mutex
var eventThreeBeforeUpdateHooks []EventThreeHook
var eventThreeAfterUpdateMu sync.Mutex
var eventThreeAfterUpdateHooks []EventThreeHook

var eventThreeBeforeDeleteMu sync.Mutex
var eventThreeBeforeDeleteHooks []EventThreeHook
var eventThreeAfterDeleteMu sync.Mutex
var eventThreeAfterDeleteHooks []EventThreeHook

var eventThreeBeforeUpsertMu sync.Mutex
var eventThreeBeforeUpsertHooks []EventThreeHook
var eventThreeAfterUpsertMu sync.Mutex
var eventThreeAfterUpsertHooks []EventThreeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventThree) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventThree) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventThree) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventThree) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventThree) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventThree) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventThree) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventThree) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventThree) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventThreeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventThreeHook registers your hook function for all future operations.
func AddEventThreeHook(hookPoint boil.HookPoint, eventThreeHook EventThreeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventThreeAfterSelectMu.Lock()
		eventThreeAfterSelectHooks = append(eventThreeAfterSelectHooks, eventThreeHook)
		eventThreeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		eventThreeBeforeInsertMu.Lock()
		eventThreeBeforeInsertHooks = append(eventThreeBeforeInsertHooks, eventThreeHook)
		eventThreeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		eventThreeAfterInsertMu.Lock()
		eventThreeAfterInsertHooks = append(eventThreeAfterInsertHooks, eventThreeHook)
		eventThreeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		eventThreeBeforeUpdateMu.Lock()
		eventThreeBeforeUpdateHooks = append(eventThreeBeforeUpdateHooks, eventThreeHook)
		eventThreeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		eventThreeAfterUpdateMu.Lock()
		eventThreeAfterUpdateHooks = append(eventThreeAfterUpdateHooks, eventThreeHook)
		eventThreeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		eventThreeBeforeDeleteMu.Lock()
		eventThreeBeforeDeleteHooks = append(eventThreeBeforeDeleteHooks, eventThreeHook)
		eventThreeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		eventThreeAfterDeleteMu.Lock()
		eventThreeAfterDeleteHooks = append(eventThreeAfterDeleteHooks, eventThreeHook)
		eventThreeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		eventThreeBeforeUpsertMu.Lock()
		eventThreeBeforeUpsertHooks = append(eventThreeBeforeUpsertHooks, eventThreeHook)
		eventThreeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		eventThreeAfterUpsertMu.Lock()
		eventThreeAfterUpsertHooks = append(eventThreeAfterUpsertHooks, eventThreeHook)
		eventThreeAfterUpsertMu.Unlock()
	}
}

// One returns a single eventThree record from the query.
func (q eventThreeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventThree, error) {
	o := &EventThree{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_three")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventThree records from the query.
func (q eventThreeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventThreeSlice, error) {
	var o []*EventThree

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventThree slice")
	}

	if len(eventThreeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventThree records in the query.
func (q eventThreeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_three rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventThreeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_three exists")
	}

	return count > 0, nil
}

// EventThrees retrieves all the records using an executor.
func EventThrees(mods ...qm.QueryMod) eventThreeQuery {
	mods = append(mods, qm.From("`event_three`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`event_three`.*"})
	}

	return eventThreeQuery{q}
}

// FindEventThree retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventThree(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*EventThree, error) {
	eventThreeObj := &EventThree{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `event_three` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, eventThreeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_three")
	}

	if err = eventThreeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventThreeObj, err
	}

	return eventThreeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventThree) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_three provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventThreeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventThreeInsertCacheMut.RLock()
	cache, cached := eventThreeInsertCache[key]
	eventThreeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventThreeAllColumns,
			eventThreeColumnsWithDefault,
			eventThreeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventThreeType, eventThreeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventThreeType, eventThreeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `event_three` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `event_three` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `event_three` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, eventThreePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_three")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == eventThreeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for event_three")
	}

CacheNoHooks:
	if !cached {
		eventThreeInsertCacheMut.Lock()
		eventThreeInsertCache[key] = cache
		eventThreeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventThree.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventThree) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventThreeUpdateCacheMut.RLock()
	cache, cached := eventThreeUpdateCache[key]
	eventThreeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventThreeAllColumns,
			eventThreePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_three, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `event_three` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, eventThreePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventThreeType, eventThreeMapping, append(wl, eventThreePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_three row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_three")
	}

	if !cached {
		eventThreeUpdateCacheMut.Lock()
		eventThreeUpdateCache[key] = cache
		eventThreeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventThreeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_three")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_three")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventThreeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventThreePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `event_three` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventThreePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventThree slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventThree")
	}
	return rowsAff, nil
}

var mySQLEventThreeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventThree) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_three provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventThreeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEventThreeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventThreeUpsertCacheMut.RLock()
	cache, cached := eventThreeUpsertCache[key]
	eventThreeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			eventThreeAllColumns,
			eventThreeColumnsWithDefault,
			eventThreeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventThreeAllColumns,
			eventThreePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert event_three, could not build update column list")
		}

		ret := strmangle.SetComplement(eventThreeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`event_three`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `event_three` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(eventThreeType, eventThreeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventThreeType, eventThreeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for event_three")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == eventThreeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(eventThreeType, eventThreeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for event_three")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for event_three")
	}

CacheNoHooks:
	if !cached {
		eventThreeUpsertCacheMut.Lock()
		eventThreeUpsertCache[key] = cache
		eventThreeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EventThree record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventThree) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventThree provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventThreePrimaryKeyMapping)
	sql := "DELETE FROM `event_three` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_three")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_three")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventThreeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventThreeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_three")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_three")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventThreeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventThreeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventThreePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `event_three` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventThreePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventThree slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_three")
	}

	if len(eventThreeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventThree) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventThree(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventThreeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventThreeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventThreePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `event_three`.* FROM `event_three` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventThreePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventThreeSlice")
	}

	*o = slice

	return nil
}

// EventThreeExists checks if the EventThree row exists.
func EventThreeExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `event_three` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_three exists")
	}

	return exists, nil
}

// Exists checks if the EventThree row exists.
func (o *EventThree) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventThreeExists(ctx, exec, o.ID)
}
