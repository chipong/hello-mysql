// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Truck is an object representing the database table.
type Truck struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentID null.Int    `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Name     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *truckR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L truckL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TruckColumns = struct {
	ID       string
	ParentID string
	Name     string
}{
	ID:       "id",
	ParentID: "parent_id",
	Name:     "name",
}

var TruckTableColumns = struct {
	ID       string
	ParentID string
	Name     string
}{
	ID:       "trucks.id",
	ParentID: "trucks.parent_id",
	Name:     "trucks.name",
}

// Generated where

var TruckWhere = struct {
	ID       whereHelperint
	ParentID whereHelpernull_Int
	Name     whereHelpernull_String
}{
	ID:       whereHelperint{field: "`trucks`.`id`"},
	ParentID: whereHelpernull_Int{field: "`trucks`.`parent_id`"},
	Name:     whereHelpernull_String{field: "`trucks`.`name`"},
}

// TruckRels is where relationship names are stored.
var TruckRels = struct {
	Parent       string
	ParentTrucks string
}{
	Parent:       "Parent",
	ParentTrucks: "ParentTrucks",
}

// truckR is where relationships are stored.
type truckR struct {
	Parent       *Truck     `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	ParentTrucks TruckSlice `boil:"ParentTrucks" json:"ParentTrucks" toml:"ParentTrucks" yaml:"ParentTrucks"`
}

// NewStruct creates a new relationship struct
func (*truckR) NewStruct() *truckR {
	return &truckR{}
}

func (r *truckR) GetParent() *Truck {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *truckR) GetParentTrucks() TruckSlice {
	if r == nil {
		return nil
	}
	return r.ParentTrucks
}

// truckL is where Load methods for each relationship are stored.
type truckL struct{}

var (
	truckAllColumns            = []string{"id", "parent_id", "name"}
	truckColumnsWithoutDefault = []string{"id", "parent_id", "name"}
	truckColumnsWithDefault    = []string{}
	truckPrimaryKeyColumns     = []string{"id"}
	truckGeneratedColumns      = []string{}
)

type (
	// TruckSlice is an alias for a slice of pointers to Truck.
	// This should almost always be used instead of []Truck.
	TruckSlice []*Truck
	// TruckHook is the signature for custom Truck hook methods
	TruckHook func(context.Context, boil.ContextExecutor, *Truck) error

	truckQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	truckType                 = reflect.TypeOf(&Truck{})
	truckMapping              = queries.MakeStructMapping(truckType)
	truckPrimaryKeyMapping, _ = queries.BindMapping(truckType, truckMapping, truckPrimaryKeyColumns)
	truckInsertCacheMut       sync.RWMutex
	truckInsertCache          = make(map[string]insertCache)
	truckUpdateCacheMut       sync.RWMutex
	truckUpdateCache          = make(map[string]updateCache)
	truckUpsertCacheMut       sync.RWMutex
	truckUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var truckAfterSelectMu sync.Mutex
var truckAfterSelectHooks []TruckHook

var truckBeforeInsertMu sync.Mutex
var truckBeforeInsertHooks []TruckHook
var truckAfterInsertMu sync.Mutex
var truckAfterInsertHooks []TruckHook

var truckBeforeUpdateMu sync.Mutex
var truckBeforeUpdateHooks []TruckHook
var truckAfterUpdateMu sync.Mutex
var truckAfterUpdateHooks []TruckHook

var truckBeforeDeleteMu sync.Mutex
var truckBeforeDeleteHooks []TruckHook
var truckAfterDeleteMu sync.Mutex
var truckAfterDeleteHooks []TruckHook

var truckBeforeUpsertMu sync.Mutex
var truckBeforeUpsertHooks []TruckHook
var truckAfterUpsertMu sync.Mutex
var truckAfterUpsertHooks []TruckHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Truck) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Truck) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Truck) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Truck) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Truck) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Truck) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Truck) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Truck) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Truck) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range truckAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTruckHook registers your hook function for all future operations.
func AddTruckHook(hookPoint boil.HookPoint, truckHook TruckHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		truckAfterSelectMu.Lock()
		truckAfterSelectHooks = append(truckAfterSelectHooks, truckHook)
		truckAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		truckBeforeInsertMu.Lock()
		truckBeforeInsertHooks = append(truckBeforeInsertHooks, truckHook)
		truckBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		truckAfterInsertMu.Lock()
		truckAfterInsertHooks = append(truckAfterInsertHooks, truckHook)
		truckAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		truckBeforeUpdateMu.Lock()
		truckBeforeUpdateHooks = append(truckBeforeUpdateHooks, truckHook)
		truckBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		truckAfterUpdateMu.Lock()
		truckAfterUpdateHooks = append(truckAfterUpdateHooks, truckHook)
		truckAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		truckBeforeDeleteMu.Lock()
		truckBeforeDeleteHooks = append(truckBeforeDeleteHooks, truckHook)
		truckBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		truckAfterDeleteMu.Lock()
		truckAfterDeleteHooks = append(truckAfterDeleteHooks, truckHook)
		truckAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		truckBeforeUpsertMu.Lock()
		truckBeforeUpsertHooks = append(truckBeforeUpsertHooks, truckHook)
		truckBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		truckAfterUpsertMu.Lock()
		truckAfterUpsertHooks = append(truckAfterUpsertHooks, truckHook)
		truckAfterUpsertMu.Unlock()
	}
}

// One returns a single truck record from the query.
func (q truckQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Truck, error) {
	o := &Truck{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trucks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Truck records from the query.
func (q truckQuery) All(ctx context.Context, exec boil.ContextExecutor) (TruckSlice, error) {
	var o []*Truck

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Truck slice")
	}

	if len(truckAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Truck records in the query.
func (q truckQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trucks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q truckQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trucks exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *Truck) Parent(mods ...qm.QueryMod) truckQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return Trucks(queryMods...)
}

// ParentTrucks retrieves all the truck's Trucks with an executor via parent_id column.
func (o *Truck) ParentTrucks(mods ...qm.QueryMod) truckQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`trucks`.`parent_id`=?", o.ID),
	)

	return Trucks(queryMods...)
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (truckL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTruck interface{}, mods queries.Applicator) error {
	var slice []*Truck
	var object *Truck

	if singular {
		var ok bool
		object, ok = maybeTruck.(*Truck)
		if !ok {
			object = new(Truck)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTruck)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTruck))
			}
		}
	} else {
		s, ok := maybeTruck.(*[]*Truck)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTruck)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTruck))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &truckR{}
		}
		if !queries.IsNil(object.ParentID) {
			args[object.ParentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &truckR{}
			}

			if !queries.IsNil(obj.ParentID) {
				args[obj.ParentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`trucks`),
		qm.WhereIn(`trucks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Truck")
	}

	var resultSlice []*Truck
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Truck")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trucks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trucks")
	}

	if len(truckAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &truckR{}
		}
		foreign.R.ParentTrucks = append(foreign.R.ParentTrucks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &truckR{}
				}
				foreign.R.ParentTrucks = append(foreign.R.ParentTrucks, local)
				break
			}
		}
	}

	return nil
}

// LoadParentTrucks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (truckL) LoadParentTrucks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTruck interface{}, mods queries.Applicator) error {
	var slice []*Truck
	var object *Truck

	if singular {
		var ok bool
		object, ok = maybeTruck.(*Truck)
		if !ok {
			object = new(Truck)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTruck)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTruck))
			}
		}
	} else {
		s, ok := maybeTruck.(*[]*Truck)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTruck)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTruck))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &truckR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &truckR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`trucks`),
		qm.WhereIn(`trucks.parent_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trucks")
	}

	var resultSlice []*Truck
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trucks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trucks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trucks")
	}

	if len(truckAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentTrucks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &truckR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentTrucks = append(local.R.ParentTrucks, foreign)
				if foreign.R == nil {
					foreign.R = &truckR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// SetParent of the truck to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentTrucks.
func (o *Truck) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Truck) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `trucks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
		strmangle.WhereClause("`", "`", 0, truckPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &truckR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &truckR{
			ParentTrucks: TruckSlice{o},
		}
	} else {
		related.R.ParentTrucks = append(related.R.ParentTrucks, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Truck) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *Truck) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentTrucks {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentTrucks)
		if ln > 1 && i < ln-1 {
			related.R.ParentTrucks[i] = related.R.ParentTrucks[ln-1]
		}
		related.R.ParentTrucks = related.R.ParentTrucks[:ln-1]
		break
	}
	return nil
}

// AddParentTrucks adds the given related objects to the existing relationships
// of the truck, optionally inserting them as new records.
// Appends related to o.R.ParentTrucks.
// Sets related.R.Parent appropriately.
func (o *Truck) AddParentTrucks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Truck) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `trucks` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
				strmangle.WhereClause("`", "`", 0, truckPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &truckR{
			ParentTrucks: related,
		}
	} else {
		o.R.ParentTrucks = append(o.R.ParentTrucks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &truckR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentTrucks removes all previously related items of the
// truck replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentTrucks accordingly.
// Replaces o.R.ParentTrucks with related.
// Sets related.R.Parent's ParentTrucks accordingly.
func (o *Truck) SetParentTrucks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Truck) error {
	query := "update `trucks` set `parent_id` = null where `parent_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentTrucks {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}
		o.R.ParentTrucks = nil
	}

	return o.AddParentTrucks(ctx, exec, insert, related...)
}

// RemoveParentTrucks relationships from objects passed in.
// Removes related items from R.ParentTrucks (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Truck) RemoveParentTrucks(ctx context.Context, exec boil.ContextExecutor, related ...*Truck) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTrucks {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTrucks)
			if ln > 1 && i < ln-1 {
				o.R.ParentTrucks[i] = o.R.ParentTrucks[ln-1]
			}
			o.R.ParentTrucks = o.R.ParentTrucks[:ln-1]
			break
		}
	}

	return nil
}

// Trucks retrieves all the records using an executor.
func Trucks(mods ...qm.QueryMod) truckQuery {
	mods = append(mods, qm.From("`trucks`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`trucks`.*"})
	}

	return truckQuery{q}
}

// FindTruck retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTruck(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Truck, error) {
	truckObj := &Truck{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `trucks` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, truckObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trucks")
	}

	if err = truckObj.doAfterSelectHooks(ctx, exec); err != nil {
		return truckObj, err
	}

	return truckObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Truck) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trucks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(truckColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	truckInsertCacheMut.RLock()
	cache, cached := truckInsertCache[key]
	truckInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			truckAllColumns,
			truckColumnsWithDefault,
			truckColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(truckType, truckMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `trucks` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `trucks` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `trucks` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, truckPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trucks")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for trucks")
	}

CacheNoHooks:
	if !cached {
		truckInsertCacheMut.Lock()
		truckInsertCache[key] = cache
		truckInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Truck.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Truck) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	truckUpdateCacheMut.RLock()
	cache, cached := truckUpdateCache[key]
	truckUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			truckAllColumns,
			truckPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trucks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `trucks` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, truckPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, append(wl, truckPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trucks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trucks")
	}

	if !cached {
		truckUpdateCacheMut.Lock()
		truckUpdateCache[key] = cache
		truckUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q truckQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trucks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TruckSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `trucks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, truckPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in truck slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all truck")
	}
	return rowsAff, nil
}

var mySQLTruckUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Truck) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trucks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(truckColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTruckUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	truckUpsertCacheMut.RLock()
	cache, cached := truckUpsertCache[key]
	truckUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			truckAllColumns,
			truckColumnsWithDefault,
			truckColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			truckAllColumns,
			truckPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert trucks, could not build update column list")
		}

		ret := strmangle.SetComplement(truckAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`trucks`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `trucks` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(truckType, truckMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for trucks")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(truckType, truckMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for trucks")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for trucks")
	}

CacheNoHooks:
	if !cached {
		truckUpsertCacheMut.Lock()
		truckUpsertCache[key] = cache
		truckUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Truck record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Truck) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Truck provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), truckPrimaryKeyMapping)
	sql := "DELETE FROM `trucks` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trucks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q truckQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no truckQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trucks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TruckSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(truckBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `trucks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, truckPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from truck slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trucks")
	}

	if len(truckAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Truck) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTruck(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TruckSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TruckSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `trucks`.* FROM `trucks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, truckPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TruckSlice")
	}

	*o = slice

	return nil
}

// TruckExists checks if the Truck row exists.
func TruckExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `trucks` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trucks exists")
	}

	return exists, nil
}

// Exists checks if the Truck row exists.
func (o *Truck) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TruckExists(ctx, exec, o.ID)
}
