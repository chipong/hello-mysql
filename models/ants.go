// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ant is an object representing the database table.
type Ant struct {
	ID      []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    []byte `boil:"name" json:"name" toml:"name" yaml:"name"`
	TigerID []byte `boil:"tiger_id" json:"tiger_id" toml:"tiger_id" yaml:"tiger_id"`

	R *antR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L antL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AntColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "id",
	Name:    "name",
	TigerID: "tiger_id",
}

var AntTableColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "ants.id",
	Name:    "ants.name",
	TigerID: "ants.tiger_id",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AntWhere = struct {
	ID      whereHelper__byte
	Name    whereHelper__byte
	TigerID whereHelper__byte
}{
	ID:      whereHelper__byte{field: "`ants`.`id`"},
	Name:    whereHelper__byte{field: "`ants`.`name`"},
	TigerID: whereHelper__byte{field: "`ants`.`tiger_id`"},
}

// AntRels is where relationship names are stored.
var AntRels = struct {
	Tiger string
}{
	Tiger: "Tiger",
}

// antR is where relationships are stored.
type antR struct {
	Tiger *Tiger `boil:"Tiger" json:"Tiger" toml:"Tiger" yaml:"Tiger"`
}

// NewStruct creates a new relationship struct
func (*antR) NewStruct() *antR {
	return &antR{}
}

func (r *antR) GetTiger() *Tiger {
	if r == nil {
		return nil
	}
	return r.Tiger
}

// antL is where Load methods for each relationship are stored.
type antL struct{}

var (
	antAllColumns            = []string{"id", "name", "tiger_id"}
	antColumnsWithoutDefault = []string{"id", "name", "tiger_id"}
	antColumnsWithDefault    = []string{}
	antPrimaryKeyColumns     = []string{"id"}
	antGeneratedColumns      = []string{}
)

type (
	// AntSlice is an alias for a slice of pointers to Ant.
	// This should almost always be used instead of []Ant.
	AntSlice []*Ant
	// AntHook is the signature for custom Ant hook methods
	AntHook func(context.Context, boil.ContextExecutor, *Ant) error

	antQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	antType                 = reflect.TypeOf(&Ant{})
	antMapping              = queries.MakeStructMapping(antType)
	antPrimaryKeyMapping, _ = queries.BindMapping(antType, antMapping, antPrimaryKeyColumns)
	antInsertCacheMut       sync.RWMutex
	antInsertCache          = make(map[string]insertCache)
	antUpdateCacheMut       sync.RWMutex
	antUpdateCache          = make(map[string]updateCache)
	antUpsertCacheMut       sync.RWMutex
	antUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var antAfterSelectMu sync.Mutex
var antAfterSelectHooks []AntHook

var antBeforeInsertMu sync.Mutex
var antBeforeInsertHooks []AntHook
var antAfterInsertMu sync.Mutex
var antAfterInsertHooks []AntHook

var antBeforeUpdateMu sync.Mutex
var antBeforeUpdateHooks []AntHook
var antAfterUpdateMu sync.Mutex
var antAfterUpdateHooks []AntHook

var antBeforeDeleteMu sync.Mutex
var antBeforeDeleteHooks []AntHook
var antAfterDeleteMu sync.Mutex
var antAfterDeleteHooks []AntHook

var antBeforeUpsertMu sync.Mutex
var antBeforeUpsertHooks []AntHook
var antAfterUpsertMu sync.Mutex
var antAfterUpsertHooks []AntHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range antAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAntHook registers your hook function for all future operations.
func AddAntHook(hookPoint boil.HookPoint, antHook AntHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		antAfterSelectMu.Lock()
		antAfterSelectHooks = append(antAfterSelectHooks, antHook)
		antAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		antBeforeInsertMu.Lock()
		antBeforeInsertHooks = append(antBeforeInsertHooks, antHook)
		antBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		antAfterInsertMu.Lock()
		antAfterInsertHooks = append(antAfterInsertHooks, antHook)
		antAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		antBeforeUpdateMu.Lock()
		antBeforeUpdateHooks = append(antBeforeUpdateHooks, antHook)
		antBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		antAfterUpdateMu.Lock()
		antAfterUpdateHooks = append(antAfterUpdateHooks, antHook)
		antAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		antBeforeDeleteMu.Lock()
		antBeforeDeleteHooks = append(antBeforeDeleteHooks, antHook)
		antBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		antAfterDeleteMu.Lock()
		antAfterDeleteHooks = append(antAfterDeleteHooks, antHook)
		antAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		antBeforeUpsertMu.Lock()
		antBeforeUpsertHooks = append(antBeforeUpsertHooks, antHook)
		antBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		antAfterUpsertMu.Lock()
		antAfterUpsertHooks = append(antAfterUpsertHooks, antHook)
		antAfterUpsertMu.Unlock()
	}
}

// One returns a single ant record from the query.
func (q antQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ant, error) {
	o := &Ant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ant records from the query.
func (q antQuery) All(ctx context.Context, exec boil.ContextExecutor) (AntSlice, error) {
	var o []*Ant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ant slice")
	}

	if len(antAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ant records in the query.
func (q antQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q antQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ants exists")
	}

	return count > 0, nil
}

// Tiger pointed to by the foreign key.
func (o *Ant) Tiger(mods ...qm.QueryMod) tigerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TigerID),
	}

	queryMods = append(queryMods, mods...)

	return Tigers(queryMods...)
}

// LoadTiger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (antL) LoadTiger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnt interface{}, mods queries.Applicator) error {
	var slice []*Ant
	var object *Ant

	if singular {
		var ok bool
		object, ok = maybeAnt.(*Ant)
		if !ok {
			object = new(Ant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAnt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAnt))
			}
		}
	} else {
		s, ok := maybeAnt.(*[]*Ant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAnt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAnt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &antR{}
		}
		if !queries.IsNil(object.TigerID) {
			args[object.TigerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &antR{}
			}

			if !queries.IsNil(obj.TigerID) {
				args[obj.TigerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tigers`),
		qm.WhereIn(`tigers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tiger")
	}

	var resultSlice []*Tiger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tiger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tigers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tigers")
	}

	if len(tigerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tiger = foreign
		if foreign.R == nil {
			foreign.R = &tigerR{}
		}
		foreign.R.Ants = append(foreign.R.Ants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TigerID, foreign.ID) {
				local.R.Tiger = foreign
				if foreign.R == nil {
					foreign.R = &tigerR{}
				}
				foreign.R.Ants = append(foreign.R.Ants, local)
				break
			}
		}
	}

	return nil
}

// SetTiger of the ant to the related item.
// Sets o.R.Tiger to related.
// Adds o to related.R.Ants.
func (o *Ant) SetTiger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tiger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
		strmangle.WhereClause("`", "`", 0, antPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TigerID, related.ID)
	if o.R == nil {
		o.R = &antR{
			Tiger: related,
		}
	} else {
		o.R.Tiger = related
	}

	if related.R == nil {
		related.R = &tigerR{
			Ants: AntSlice{o},
		}
	} else {
		related.R.Ants = append(related.R.Ants, o)
	}

	return nil
}

// Ants retrieves all the records using an executor.
func Ants(mods ...qm.QueryMod) antQuery {
	mods = append(mods, qm.From("`ants`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`ants`.*"})
	}

	return antQuery{q}
}

// FindAnt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnt(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Ant, error) {
	antObj := &Ant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ants` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, antObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ants")
	}

	if err = antObj.doAfterSelectHooks(ctx, exec); err != nil {
		return antObj, err
	}

	return antObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(antColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	antInsertCacheMut.RLock()
	cache, cached := antInsertCache[key]
	antInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			antAllColumns,
			antColumnsWithDefault,
			antColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(antType, antMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(antType, antMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ants` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ants` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ants` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, antPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ants")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ants")
	}

CacheNoHooks:
	if !cached {
		antInsertCacheMut.Lock()
		antInsertCache[key] = cache
		antInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Ant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	antUpdateCacheMut.RLock()
	cache, cached := antUpdateCache[key]
	antUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			antAllColumns,
			antPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ants` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, antPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(antType, antMapping, append(wl, antPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ants")
	}

	if !cached {
		antUpdateCacheMut.Lock()
		antUpdateCache[key] = cache
		antUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q antQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AntSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), antPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, antPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ant")
	}
	return rowsAff, nil
}

var mySQLAntUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(antColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAntUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	antUpsertCacheMut.RLock()
	cache, cached := antUpsertCache[key]
	antUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			antAllColumns,
			antColumnsWithDefault,
			antColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			antAllColumns,
			antPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ants, could not build update column list")
		}

		ret := strmangle.SetComplement(antAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`ants`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ants` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(antType, antMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(antType, antMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ants")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(antType, antMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ants")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ants")
	}

CacheNoHooks:
	if !cached {
		antUpsertCacheMut.Lock()
		antUpsertCache[key] = cache
		antUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Ant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Ant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), antPrimaryKeyMapping)
	sql := "DELETE FROM `ants` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q antQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no antQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AntSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(antBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), antPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, antPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ants")
	}

	if len(antAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AntSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AntSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), antPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ants`.* FROM `ants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, antPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AntSlice")
	}

	*o = slice

	return nil
}

// AntExists checks if the Ant row exists.
func AntExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ants` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ants exists")
	}

	return exists, nil
}

// Exists checks if the Ant row exists.
func (o *Ant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AntExists(ctx, exec, o.ID)
}
