// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Wolf is an object representing the database table.
type Wolf struct {
	ID      []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    []byte `boil:"name" json:"name" toml:"name" yaml:"name"`
	TigerID []byte `boil:"tiger_id" json:"tiger_id" toml:"tiger_id" yaml:"tiger_id"`

	R *wolfR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wolfL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WolfColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "id",
	Name:    "name",
	TigerID: "tiger_id",
}

var WolfTableColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "wolves.id",
	Name:    "wolves.name",
	TigerID: "wolves.tiger_id",
}

// Generated where

var WolfWhere = struct {
	ID      whereHelper__byte
	Name    whereHelper__byte
	TigerID whereHelper__byte
}{
	ID:      whereHelper__byte{field: "`wolves`.`id`"},
	Name:    whereHelper__byte{field: "`wolves`.`name`"},
	TigerID: whereHelper__byte{field: "`wolves`.`tiger_id`"},
}

// WolfRels is where relationship names are stored.
var WolfRels = struct {
	Tiger string
}{
	Tiger: "Tiger",
}

// wolfR is where relationships are stored.
type wolfR struct {
	Tiger *Tiger `boil:"Tiger" json:"Tiger" toml:"Tiger" yaml:"Tiger"`
}

// NewStruct creates a new relationship struct
func (*wolfR) NewStruct() *wolfR {
	return &wolfR{}
}

func (r *wolfR) GetTiger() *Tiger {
	if r == nil {
		return nil
	}
	return r.Tiger
}

// wolfL is where Load methods for each relationship are stored.
type wolfL struct{}

var (
	wolfAllColumns            = []string{"id", "name", "tiger_id"}
	wolfColumnsWithoutDefault = []string{"id", "name", "tiger_id"}
	wolfColumnsWithDefault    = []string{}
	wolfPrimaryKeyColumns     = []string{"id"}
	wolfGeneratedColumns      = []string{}
)

type (
	// WolfSlice is an alias for a slice of pointers to Wolf.
	// This should almost always be used instead of []Wolf.
	WolfSlice []*Wolf
	// WolfHook is the signature for custom Wolf hook methods
	WolfHook func(context.Context, boil.ContextExecutor, *Wolf) error

	wolfQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wolfType                 = reflect.TypeOf(&Wolf{})
	wolfMapping              = queries.MakeStructMapping(wolfType)
	wolfPrimaryKeyMapping, _ = queries.BindMapping(wolfType, wolfMapping, wolfPrimaryKeyColumns)
	wolfInsertCacheMut       sync.RWMutex
	wolfInsertCache          = make(map[string]insertCache)
	wolfUpdateCacheMut       sync.RWMutex
	wolfUpdateCache          = make(map[string]updateCache)
	wolfUpsertCacheMut       sync.RWMutex
	wolfUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wolfAfterSelectMu sync.Mutex
var wolfAfterSelectHooks []WolfHook

var wolfBeforeInsertMu sync.Mutex
var wolfBeforeInsertHooks []WolfHook
var wolfAfterInsertMu sync.Mutex
var wolfAfterInsertHooks []WolfHook

var wolfBeforeUpdateMu sync.Mutex
var wolfBeforeUpdateHooks []WolfHook
var wolfAfterUpdateMu sync.Mutex
var wolfAfterUpdateHooks []WolfHook

var wolfBeforeDeleteMu sync.Mutex
var wolfBeforeDeleteHooks []WolfHook
var wolfAfterDeleteMu sync.Mutex
var wolfAfterDeleteHooks []WolfHook

var wolfBeforeUpsertMu sync.Mutex
var wolfBeforeUpsertHooks []WolfHook
var wolfAfterUpsertMu sync.Mutex
var wolfAfterUpsertHooks []WolfHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Wolf) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Wolf) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Wolf) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Wolf) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Wolf) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Wolf) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Wolf) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Wolf) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Wolf) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wolfAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWolfHook registers your hook function for all future operations.
func AddWolfHook(hookPoint boil.HookPoint, wolfHook WolfHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wolfAfterSelectMu.Lock()
		wolfAfterSelectHooks = append(wolfAfterSelectHooks, wolfHook)
		wolfAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		wolfBeforeInsertMu.Lock()
		wolfBeforeInsertHooks = append(wolfBeforeInsertHooks, wolfHook)
		wolfBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		wolfAfterInsertMu.Lock()
		wolfAfterInsertHooks = append(wolfAfterInsertHooks, wolfHook)
		wolfAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		wolfBeforeUpdateMu.Lock()
		wolfBeforeUpdateHooks = append(wolfBeforeUpdateHooks, wolfHook)
		wolfBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		wolfAfterUpdateMu.Lock()
		wolfAfterUpdateHooks = append(wolfAfterUpdateHooks, wolfHook)
		wolfAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		wolfBeforeDeleteMu.Lock()
		wolfBeforeDeleteHooks = append(wolfBeforeDeleteHooks, wolfHook)
		wolfBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		wolfAfterDeleteMu.Lock()
		wolfAfterDeleteHooks = append(wolfAfterDeleteHooks, wolfHook)
		wolfAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		wolfBeforeUpsertMu.Lock()
		wolfBeforeUpsertHooks = append(wolfBeforeUpsertHooks, wolfHook)
		wolfBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		wolfAfterUpsertMu.Lock()
		wolfAfterUpsertHooks = append(wolfAfterUpsertHooks, wolfHook)
		wolfAfterUpsertMu.Unlock()
	}
}

// One returns a single wolf record from the query.
func (q wolfQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Wolf, error) {
	o := &Wolf{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wolves")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Wolf records from the query.
func (q wolfQuery) All(ctx context.Context, exec boil.ContextExecutor) (WolfSlice, error) {
	var o []*Wolf

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Wolf slice")
	}

	if len(wolfAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Wolf records in the query.
func (q wolfQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wolves rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wolfQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wolves exists")
	}

	return count > 0, nil
}

// Tiger pointed to by the foreign key.
func (o *Wolf) Tiger(mods ...qm.QueryMod) tigerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TigerID),
	}

	queryMods = append(queryMods, mods...)

	return Tigers(queryMods...)
}

// LoadTiger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wolfL) LoadTiger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWolf interface{}, mods queries.Applicator) error {
	var slice []*Wolf
	var object *Wolf

	if singular {
		var ok bool
		object, ok = maybeWolf.(*Wolf)
		if !ok {
			object = new(Wolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWolf))
			}
		}
	} else {
		s, ok := maybeWolf.(*[]*Wolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &wolfR{}
		}
		if !queries.IsNil(object.TigerID) {
			args[object.TigerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wolfR{}
			}

			if !queries.IsNil(obj.TigerID) {
				args[obj.TigerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tigers`),
		qm.WhereIn(`tigers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tiger")
	}

	var resultSlice []*Tiger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tiger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tigers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tigers")
	}

	if len(tigerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tiger = foreign
		if foreign.R == nil {
			foreign.R = &tigerR{}
		}
		foreign.R.Wolf = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TigerID, foreign.ID) {
				local.R.Tiger = foreign
				if foreign.R == nil {
					foreign.R = &tigerR{}
				}
				foreign.R.Wolf = local
				break
			}
		}
	}

	return nil
}

// SetTiger of the wolf to the related item.
// Sets o.R.Tiger to related.
// Adds o to related.R.Wolf.
func (o *Wolf) SetTiger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tiger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `wolves` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
		strmangle.WhereClause("`", "`", 0, wolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TigerID, related.ID)
	if o.R == nil {
		o.R = &wolfR{
			Tiger: related,
		}
	} else {
		o.R.Tiger = related
	}

	if related.R == nil {
		related.R = &tigerR{
			Wolf: o,
		}
	} else {
		related.R.Wolf = o
	}

	return nil
}

// Wolves retrieves all the records using an executor.
func Wolves(mods ...qm.QueryMod) wolfQuery {
	mods = append(mods, qm.From("`wolves`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`wolves`.*"})
	}

	return wolfQuery{q}
}

// FindWolf retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWolf(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Wolf, error) {
	wolfObj := &Wolf{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `wolves` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wolfObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wolves")
	}

	if err = wolfObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wolfObj, err
	}

	return wolfObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Wolf) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wolves provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wolfColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wolfInsertCacheMut.RLock()
	cache, cached := wolfInsertCache[key]
	wolfInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wolfAllColumns,
			wolfColumnsWithDefault,
			wolfColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wolfType, wolfMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wolfType, wolfMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `wolves` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `wolves` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `wolves` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, wolfPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wolves")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for wolves")
	}

CacheNoHooks:
	if !cached {
		wolfInsertCacheMut.Lock()
		wolfInsertCache[key] = cache
		wolfInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Wolf.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Wolf) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wolfUpdateCacheMut.RLock()
	cache, cached := wolfUpdateCache[key]
	wolfUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wolfAllColumns,
			wolfPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wolves, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `wolves` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, wolfPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wolfType, wolfMapping, append(wl, wolfPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wolves row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wolves")
	}

	if !cached {
		wolfUpdateCacheMut.Lock()
		wolfUpdateCache[key] = cache
		wolfUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wolfQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wolves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wolves")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WolfSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `wolves` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wolfPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wolf")
	}
	return rowsAff, nil
}

var mySQLWolfUniqueColumns = []string{
	"id",
	"tiger_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Wolf) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wolves provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wolfColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWolfUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wolfUpsertCacheMut.RLock()
	cache, cached := wolfUpsertCache[key]
	wolfUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			wolfAllColumns,
			wolfColumnsWithDefault,
			wolfColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wolfAllColumns,
			wolfPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert wolves, could not build update column list")
		}

		ret := strmangle.SetComplement(wolfAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`wolves`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `wolves` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(wolfType, wolfMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wolfType, wolfMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for wolves")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(wolfType, wolfMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for wolves")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for wolves")
	}

CacheNoHooks:
	if !cached {
		wolfUpsertCacheMut.Lock()
		wolfUpsertCache[key] = cache
		wolfUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Wolf record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Wolf) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Wolf provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wolfPrimaryKeyMapping)
	sql := "DELETE FROM `wolves` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wolves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wolves")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wolfQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wolfQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wolves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wolves")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WolfSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wolfBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `wolves` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wolfPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wolves")
	}

	if len(wolfAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Wolf) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWolf(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WolfSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WolfSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `wolves`.* FROM `wolves` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wolfPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WolfSlice")
	}

	*o = slice

	return nil
}

// WolfExists checks if the Wolf row exists.
func WolfExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `wolves` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wolves exists")
	}

	return exists, nil
}

// Exists checks if the Wolf row exists.
func (o *Wolf) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WolfExists(ctx, exec, o.ID)
}
