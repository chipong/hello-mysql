// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CarCar is an object representing the database table.
type CarCar struct {
	CarID        int    `boil:"car_id" json:"car_id" toml:"car_id" yaml:"car_id"`
	AwesomeCarID int    `boil:"awesome_car_id" json:"awesome_car_id" toml:"awesome_car_id" yaml:"awesome_car_id"`
	Relation     string `boil:"relation" json:"relation" toml:"relation" yaml:"relation"`

	R *carCarR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L carCarL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CarCarColumns = struct {
	CarID        string
	AwesomeCarID string
	Relation     string
}{
	CarID:        "car_id",
	AwesomeCarID: "awesome_car_id",
	Relation:     "relation",
}

var CarCarTableColumns = struct {
	CarID        string
	AwesomeCarID string
	Relation     string
}{
	CarID:        "car_cars.car_id",
	AwesomeCarID: "car_cars.awesome_car_id",
	Relation:     "car_cars.relation",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CarCarWhere = struct {
	CarID        whereHelperint
	AwesomeCarID whereHelperint
	Relation     whereHelperstring
}{
	CarID:        whereHelperint{field: "`car_cars`.`car_id`"},
	AwesomeCarID: whereHelperint{field: "`car_cars`.`awesome_car_id`"},
	Relation:     whereHelperstring{field: "`car_cars`.`relation`"},
}

// CarCarRels is where relationship names are stored.
var CarCarRels = struct {
	Car        string
	AwesomeCar string
}{
	Car:        "Car",
	AwesomeCar: "AwesomeCar",
}

// carCarR is where relationships are stored.
type carCarR struct {
	Car        *Car `boil:"Car" json:"Car" toml:"Car" yaml:"Car"`
	AwesomeCar *Car `boil:"AwesomeCar" json:"AwesomeCar" toml:"AwesomeCar" yaml:"AwesomeCar"`
}

// NewStruct creates a new relationship struct
func (*carCarR) NewStruct() *carCarR {
	return &carCarR{}
}

func (r *carCarR) GetCar() *Car {
	if r == nil {
		return nil
	}
	return r.Car
}

func (r *carCarR) GetAwesomeCar() *Car {
	if r == nil {
		return nil
	}
	return r.AwesomeCar
}

// carCarL is where Load methods for each relationship are stored.
type carCarL struct{}

var (
	carCarAllColumns            = []string{"car_id", "awesome_car_id", "relation"}
	carCarColumnsWithoutDefault = []string{"car_id", "awesome_car_id", "relation"}
	carCarColumnsWithDefault    = []string{}
	carCarPrimaryKeyColumns     = []string{"car_id", "awesome_car_id"}
	carCarGeneratedColumns      = []string{}
)

type (
	// CarCarSlice is an alias for a slice of pointers to CarCar.
	// This should almost always be used instead of []CarCar.
	CarCarSlice []*CarCar
	// CarCarHook is the signature for custom CarCar hook methods
	CarCarHook func(context.Context, boil.ContextExecutor, *CarCar) error

	carCarQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	carCarType                 = reflect.TypeOf(&CarCar{})
	carCarMapping              = queries.MakeStructMapping(carCarType)
	carCarPrimaryKeyMapping, _ = queries.BindMapping(carCarType, carCarMapping, carCarPrimaryKeyColumns)
	carCarInsertCacheMut       sync.RWMutex
	carCarInsertCache          = make(map[string]insertCache)
	carCarUpdateCacheMut       sync.RWMutex
	carCarUpdateCache          = make(map[string]updateCache)
	carCarUpsertCacheMut       sync.RWMutex
	carCarUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var carCarAfterSelectMu sync.Mutex
var carCarAfterSelectHooks []CarCarHook

var carCarBeforeInsertMu sync.Mutex
var carCarBeforeInsertHooks []CarCarHook
var carCarAfterInsertMu sync.Mutex
var carCarAfterInsertHooks []CarCarHook

var carCarBeforeUpdateMu sync.Mutex
var carCarBeforeUpdateHooks []CarCarHook
var carCarAfterUpdateMu sync.Mutex
var carCarAfterUpdateHooks []CarCarHook

var carCarBeforeDeleteMu sync.Mutex
var carCarBeforeDeleteHooks []CarCarHook
var carCarAfterDeleteMu sync.Mutex
var carCarAfterDeleteHooks []CarCarHook

var carCarBeforeUpsertMu sync.Mutex
var carCarBeforeUpsertHooks []CarCarHook
var carCarAfterUpsertMu sync.Mutex
var carCarAfterUpsertHooks []CarCarHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CarCar) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CarCar) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CarCar) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CarCar) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CarCar) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CarCar) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CarCar) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CarCar) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CarCar) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carCarAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCarCarHook registers your hook function for all future operations.
func AddCarCarHook(hookPoint boil.HookPoint, carCarHook CarCarHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		carCarAfterSelectMu.Lock()
		carCarAfterSelectHooks = append(carCarAfterSelectHooks, carCarHook)
		carCarAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		carCarBeforeInsertMu.Lock()
		carCarBeforeInsertHooks = append(carCarBeforeInsertHooks, carCarHook)
		carCarBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		carCarAfterInsertMu.Lock()
		carCarAfterInsertHooks = append(carCarAfterInsertHooks, carCarHook)
		carCarAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		carCarBeforeUpdateMu.Lock()
		carCarBeforeUpdateHooks = append(carCarBeforeUpdateHooks, carCarHook)
		carCarBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		carCarAfterUpdateMu.Lock()
		carCarAfterUpdateHooks = append(carCarAfterUpdateHooks, carCarHook)
		carCarAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		carCarBeforeDeleteMu.Lock()
		carCarBeforeDeleteHooks = append(carCarBeforeDeleteHooks, carCarHook)
		carCarBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		carCarAfterDeleteMu.Lock()
		carCarAfterDeleteHooks = append(carCarAfterDeleteHooks, carCarHook)
		carCarAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		carCarBeforeUpsertMu.Lock()
		carCarBeforeUpsertHooks = append(carCarBeforeUpsertHooks, carCarHook)
		carCarBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		carCarAfterUpsertMu.Lock()
		carCarAfterUpsertHooks = append(carCarAfterUpsertHooks, carCarHook)
		carCarAfterUpsertMu.Unlock()
	}
}

// One returns a single carCar record from the query.
func (q carCarQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CarCar, error) {
	o := &CarCar{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for car_cars")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CarCar records from the query.
func (q carCarQuery) All(ctx context.Context, exec boil.ContextExecutor) (CarCarSlice, error) {
	var o []*CarCar

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CarCar slice")
	}

	if len(carCarAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CarCar records in the query.
func (q carCarQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count car_cars rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q carCarQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if car_cars exists")
	}

	return count > 0, nil
}

// Car pointed to by the foreign key.
func (o *CarCar) Car(mods ...qm.QueryMod) carQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CarID),
	}

	queryMods = append(queryMods, mods...)

	return Cars(queryMods...)
}

// AwesomeCar pointed to by the foreign key.
func (o *CarCar) AwesomeCar(mods ...qm.QueryMod) carQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AwesomeCarID),
	}

	queryMods = append(queryMods, mods...)

	return Cars(queryMods...)
}

// LoadCar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (carCarL) LoadCar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCarCar interface{}, mods queries.Applicator) error {
	var slice []*CarCar
	var object *CarCar

	if singular {
		var ok bool
		object, ok = maybeCarCar.(*CarCar)
		if !ok {
			object = new(CarCar)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCarCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCarCar))
			}
		}
	} else {
		s, ok := maybeCarCar.(*[]*CarCar)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCarCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCarCar))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &carCarR{}
		}
		args[object.CarID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carCarR{}
			}

			args[obj.CarID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cars`),
		qm.WhereIn(`cars.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Car")
	}

	var resultSlice []*Car
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Car")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cars")
	}

	if len(carAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Car = foreign
		if foreign.R == nil {
			foreign.R = &carR{}
		}
		foreign.R.CarCars = append(foreign.R.CarCars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CarID == foreign.ID {
				local.R.Car = foreign
				if foreign.R == nil {
					foreign.R = &carR{}
				}
				foreign.R.CarCars = append(foreign.R.CarCars, local)
				break
			}
		}
	}

	return nil
}

// LoadAwesomeCar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (carCarL) LoadAwesomeCar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCarCar interface{}, mods queries.Applicator) error {
	var slice []*CarCar
	var object *CarCar

	if singular {
		var ok bool
		object, ok = maybeCarCar.(*CarCar)
		if !ok {
			object = new(CarCar)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCarCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCarCar))
			}
		}
	} else {
		s, ok := maybeCarCar.(*[]*CarCar)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCarCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCarCar))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &carCarR{}
		}
		args[object.AwesomeCarID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carCarR{}
			}

			args[obj.AwesomeCarID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cars`),
		qm.WhereIn(`cars.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Car")
	}

	var resultSlice []*Car
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Car")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cars")
	}

	if len(carAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AwesomeCar = foreign
		if foreign.R == nil {
			foreign.R = &carR{}
		}
		foreign.R.AwesomeCarCarCars = append(foreign.R.AwesomeCarCarCars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AwesomeCarID == foreign.ID {
				local.R.AwesomeCar = foreign
				if foreign.R == nil {
					foreign.R = &carR{}
				}
				foreign.R.AwesomeCarCarCars = append(foreign.R.AwesomeCarCarCars, local)
				break
			}
		}
	}

	return nil
}

// SetCar of the carCar to the related item.
// Sets o.R.Car to related.
// Adds o to related.R.CarCars.
func (o *CarCar) SetCar(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Car) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `car_cars` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"car_id"}),
		strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CarID, o.AwesomeCarID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CarID = related.ID
	if o.R == nil {
		o.R = &carCarR{
			Car: related,
		}
	} else {
		o.R.Car = related
	}

	if related.R == nil {
		related.R = &carR{
			CarCars: CarCarSlice{o},
		}
	} else {
		related.R.CarCars = append(related.R.CarCars, o)
	}

	return nil
}

// SetAwesomeCar of the carCar to the related item.
// Sets o.R.AwesomeCar to related.
// Adds o to related.R.AwesomeCarCarCars.
func (o *CarCar) SetAwesomeCar(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Car) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `car_cars` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"awesome_car_id"}),
		strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CarID, o.AwesomeCarID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AwesomeCarID = related.ID
	if o.R == nil {
		o.R = &carCarR{
			AwesomeCar: related,
		}
	} else {
		o.R.AwesomeCar = related
	}

	if related.R == nil {
		related.R = &carR{
			AwesomeCarCarCars: CarCarSlice{o},
		}
	} else {
		related.R.AwesomeCarCarCars = append(related.R.AwesomeCarCarCars, o)
	}

	return nil
}

// CarCars retrieves all the records using an executor.
func CarCars(mods ...qm.QueryMod) carCarQuery {
	mods = append(mods, qm.From("`car_cars`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`car_cars`.*"})
	}

	return carCarQuery{q}
}

// FindCarCar retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCarCar(ctx context.Context, exec boil.ContextExecutor, carID int, awesomeCarID int, selectCols ...string) (*CarCar, error) {
	carCarObj := &CarCar{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `car_cars` where `car_id`=? AND `awesome_car_id`=?", sel,
	)

	q := queries.Raw(query, carID, awesomeCarID)

	err := q.Bind(ctx, exec, carCarObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from car_cars")
	}

	if err = carCarObj.doAfterSelectHooks(ctx, exec); err != nil {
		return carCarObj, err
	}

	return carCarObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CarCar) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no car_cars provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carCarColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	carCarInsertCacheMut.RLock()
	cache, cached := carCarInsertCache[key]
	carCarInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			carCarAllColumns,
			carCarColumnsWithDefault,
			carCarColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(carCarType, carCarMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(carCarType, carCarMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `car_cars` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `car_cars` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `car_cars` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into car_cars")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CarID,
		o.AwesomeCarID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for car_cars")
	}

CacheNoHooks:
	if !cached {
		carCarInsertCacheMut.Lock()
		carCarInsertCache[key] = cache
		carCarInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CarCar.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CarCar) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	carCarUpdateCacheMut.RLock()
	cache, cached := carCarUpdateCache[key]
	carCarUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			carCarAllColumns,
			carCarPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update car_cars, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `car_cars` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(carCarType, carCarMapping, append(wl, carCarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update car_cars row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for car_cars")
	}

	if !cached {
		carCarUpdateCacheMut.Lock()
		carCarUpdateCache[key] = cache
		carCarUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q carCarQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for car_cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for car_cars")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CarCarSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carCarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `car_cars` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carCarPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in carCar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all carCar")
	}
	return rowsAff, nil
}

var mySQLCarCarUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CarCar) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no car_cars provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carCarColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCarCarUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	carCarUpsertCacheMut.RLock()
	cache, cached := carCarUpsertCache[key]
	carCarUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			carCarAllColumns,
			carCarColumnsWithDefault,
			carCarColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			carCarAllColumns,
			carCarPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert car_cars, could not build update column list")
		}

		ret := strmangle.SetComplement(carCarAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`car_cars`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `car_cars` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(carCarType, carCarMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(carCarType, carCarMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for car_cars")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(carCarType, carCarMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for car_cars")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for car_cars")
	}

CacheNoHooks:
	if !cached {
		carCarUpsertCacheMut.Lock()
		carCarUpsertCache[key] = cache
		carCarUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CarCar record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CarCar) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CarCar provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), carCarPrimaryKeyMapping)
	sql := "DELETE FROM `car_cars` WHERE `car_id`=? AND `awesome_car_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from car_cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for car_cars")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q carCarQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no carCarQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from car_cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for car_cars")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CarCarSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(carCarBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carCarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `car_cars` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carCarPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from carCar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for car_cars")
	}

	if len(carCarAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CarCar) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCarCar(ctx, exec, o.CarID, o.AwesomeCarID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CarCarSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CarCarSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carCarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `car_cars`.* FROM `car_cars` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carCarPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CarCarSlice")
	}

	*o = slice

	return nil
}

// CarCarExists checks if the CarCar row exists.
func CarCarExists(ctx context.Context, exec boil.ContextExecutor, carID int, awesomeCarID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `car_cars` where `car_id`=? AND `awesome_car_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, carID, awesomeCarID)
	}
	row := exec.QueryRowContext(ctx, sql, carID, awesomeCarID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if car_cars exists")
	}

	return exists, nil
}

// Exists checks if the CarCar row exists.
func (o *CarCar) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CarCarExists(ctx, exec, o.CarID, o.AwesomeCarID)
}
