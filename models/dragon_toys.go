// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DragonToy is an object representing the database table.
type DragonToy struct {
	DragonID string `boil:"dragon_id" json:"dragon_id" toml:"dragon_id" yaml:"dragon_id"`
	ToyID    string `boil:"toy_id" json:"toy_id" toml:"toy_id" yaml:"toy_id"`

	R *dragonToyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dragonToyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DragonToyColumns = struct {
	DragonID string
	ToyID    string
}{
	DragonID: "dragon_id",
	ToyID:    "toy_id",
}

var DragonToyTableColumns = struct {
	DragonID string
	ToyID    string
}{
	DragonID: "dragon_toys.dragon_id",
	ToyID:    "dragon_toys.toy_id",
}

// Generated where

var DragonToyWhere = struct {
	DragonID whereHelperstring
	ToyID    whereHelperstring
}{
	DragonID: whereHelperstring{field: "`dragon_toys`.`dragon_id`"},
	ToyID:    whereHelperstring{field: "`dragon_toys`.`toy_id`"},
}

// DragonToyRels is where relationship names are stored.
var DragonToyRels = struct {
}{}

// dragonToyR is where relationships are stored.
type dragonToyR struct {
}

// NewStruct creates a new relationship struct
func (*dragonToyR) NewStruct() *dragonToyR {
	return &dragonToyR{}
}

// dragonToyL is where Load methods for each relationship are stored.
type dragonToyL struct{}

var (
	dragonToyAllColumns            = []string{"dragon_id", "toy_id"}
	dragonToyColumnsWithoutDefault = []string{"dragon_id", "toy_id"}
	dragonToyColumnsWithDefault    = []string{}
	dragonToyPrimaryKeyColumns     = []string{"dragon_id", "toy_id"}
	dragonToyGeneratedColumns      = []string{}
)

type (
	// DragonToySlice is an alias for a slice of pointers to DragonToy.
	// This should almost always be used instead of []DragonToy.
	DragonToySlice []*DragonToy
	// DragonToyHook is the signature for custom DragonToy hook methods
	DragonToyHook func(context.Context, boil.ContextExecutor, *DragonToy) error

	dragonToyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dragonToyType                 = reflect.TypeOf(&DragonToy{})
	dragonToyMapping              = queries.MakeStructMapping(dragonToyType)
	dragonToyPrimaryKeyMapping, _ = queries.BindMapping(dragonToyType, dragonToyMapping, dragonToyPrimaryKeyColumns)
	dragonToyInsertCacheMut       sync.RWMutex
	dragonToyInsertCache          = make(map[string]insertCache)
	dragonToyUpdateCacheMut       sync.RWMutex
	dragonToyUpdateCache          = make(map[string]updateCache)
	dragonToyUpsertCacheMut       sync.RWMutex
	dragonToyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dragonToyAfterSelectMu sync.Mutex
var dragonToyAfterSelectHooks []DragonToyHook

var dragonToyBeforeInsertMu sync.Mutex
var dragonToyBeforeInsertHooks []DragonToyHook
var dragonToyAfterInsertMu sync.Mutex
var dragonToyAfterInsertHooks []DragonToyHook

var dragonToyBeforeUpdateMu sync.Mutex
var dragonToyBeforeUpdateHooks []DragonToyHook
var dragonToyAfterUpdateMu sync.Mutex
var dragonToyAfterUpdateHooks []DragonToyHook

var dragonToyBeforeDeleteMu sync.Mutex
var dragonToyBeforeDeleteHooks []DragonToyHook
var dragonToyAfterDeleteMu sync.Mutex
var dragonToyAfterDeleteHooks []DragonToyHook

var dragonToyBeforeUpsertMu sync.Mutex
var dragonToyBeforeUpsertHooks []DragonToyHook
var dragonToyAfterUpsertMu sync.Mutex
var dragonToyAfterUpsertHooks []DragonToyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DragonToy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DragonToy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DragonToy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DragonToy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DragonToy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DragonToy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DragonToy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DragonToy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DragonToy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dragonToyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDragonToyHook registers your hook function for all future operations.
func AddDragonToyHook(hookPoint boil.HookPoint, dragonToyHook DragonToyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dragonToyAfterSelectMu.Lock()
		dragonToyAfterSelectHooks = append(dragonToyAfterSelectHooks, dragonToyHook)
		dragonToyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dragonToyBeforeInsertMu.Lock()
		dragonToyBeforeInsertHooks = append(dragonToyBeforeInsertHooks, dragonToyHook)
		dragonToyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dragonToyAfterInsertMu.Lock()
		dragonToyAfterInsertHooks = append(dragonToyAfterInsertHooks, dragonToyHook)
		dragonToyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dragonToyBeforeUpdateMu.Lock()
		dragonToyBeforeUpdateHooks = append(dragonToyBeforeUpdateHooks, dragonToyHook)
		dragonToyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dragonToyAfterUpdateMu.Lock()
		dragonToyAfterUpdateHooks = append(dragonToyAfterUpdateHooks, dragonToyHook)
		dragonToyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dragonToyBeforeDeleteMu.Lock()
		dragonToyBeforeDeleteHooks = append(dragonToyBeforeDeleteHooks, dragonToyHook)
		dragonToyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dragonToyAfterDeleteMu.Lock()
		dragonToyAfterDeleteHooks = append(dragonToyAfterDeleteHooks, dragonToyHook)
		dragonToyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dragonToyBeforeUpsertMu.Lock()
		dragonToyBeforeUpsertHooks = append(dragonToyBeforeUpsertHooks, dragonToyHook)
		dragonToyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dragonToyAfterUpsertMu.Lock()
		dragonToyAfterUpsertHooks = append(dragonToyAfterUpsertHooks, dragonToyHook)
		dragonToyAfterUpsertMu.Unlock()
	}
}

// One returns a single dragonToy record from the query.
func (q dragonToyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DragonToy, error) {
	o := &DragonToy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dragon_toys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DragonToy records from the query.
func (q dragonToyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DragonToySlice, error) {
	var o []*DragonToy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DragonToy slice")
	}

	if len(dragonToyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DragonToy records in the query.
func (q dragonToyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dragon_toys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dragonToyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dragon_toys exists")
	}

	return count > 0, nil
}

// DragonToys retrieves all the records using an executor.
func DragonToys(mods ...qm.QueryMod) dragonToyQuery {
	mods = append(mods, qm.From("`dragon_toys`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`dragon_toys`.*"})
	}

	return dragonToyQuery{q}
}

// FindDragonToy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDragonToy(ctx context.Context, exec boil.ContextExecutor, dragonID string, toyID string, selectCols ...string) (*DragonToy, error) {
	dragonToyObj := &DragonToy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dragon_toys` where `dragon_id`=? AND `toy_id`=?", sel,
	)

	q := queries.Raw(query, dragonID, toyID)

	err := q.Bind(ctx, exec, dragonToyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dragon_toys")
	}

	if err = dragonToyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dragonToyObj, err
	}

	return dragonToyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DragonToy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dragon_toys provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dragonToyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dragonToyInsertCacheMut.RLock()
	cache, cached := dragonToyInsertCache[key]
	dragonToyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dragonToyAllColumns,
			dragonToyColumnsWithDefault,
			dragonToyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dragonToyType, dragonToyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dragonToyType, dragonToyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dragon_toys` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dragon_toys` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dragon_toys` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dragonToyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dragon_toys")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DragonID,
		o.ToyID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dragon_toys")
	}

CacheNoHooks:
	if !cached {
		dragonToyInsertCacheMut.Lock()
		dragonToyInsertCache[key] = cache
		dragonToyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DragonToy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DragonToy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dragonToyUpdateCacheMut.RLock()
	cache, cached := dragonToyUpdateCache[key]
	dragonToyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dragonToyAllColumns,
			dragonToyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dragon_toys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dragon_toys` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dragonToyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dragonToyType, dragonToyMapping, append(wl, dragonToyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dragon_toys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dragon_toys")
	}

	if !cached {
		dragonToyUpdateCacheMut.Lock()
		dragonToyUpdateCache[key] = cache
		dragonToyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dragonToyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dragon_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dragon_toys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DragonToySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dragonToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dragon_toys` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dragonToyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dragonToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dragonToy")
	}
	return rowsAff, nil
}

var mySQLDragonToyUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DragonToy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dragon_toys provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dragonToyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDragonToyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dragonToyUpsertCacheMut.RLock()
	cache, cached := dragonToyUpsertCache[key]
	dragonToyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dragonToyAllColumns,
			dragonToyColumnsWithDefault,
			dragonToyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dragonToyAllColumns,
			dragonToyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert dragon_toys, could not build update column list")
		}

		ret := strmangle.SetComplement(dragonToyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`dragon_toys`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dragon_toys` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dragonToyType, dragonToyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dragonToyType, dragonToyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for dragon_toys")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dragonToyType, dragonToyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for dragon_toys")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dragon_toys")
	}

CacheNoHooks:
	if !cached {
		dragonToyUpsertCacheMut.Lock()
		dragonToyUpsertCache[key] = cache
		dragonToyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DragonToy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DragonToy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DragonToy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dragonToyPrimaryKeyMapping)
	sql := "DELETE FROM `dragon_toys` WHERE `dragon_id`=? AND `toy_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dragon_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dragon_toys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dragonToyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dragonToyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dragon_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dragon_toys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DragonToySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dragonToyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dragonToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dragon_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dragonToyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dragonToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dragon_toys")
	}

	if len(dragonToyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DragonToy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDragonToy(ctx, exec, o.DragonID, o.ToyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DragonToySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DragonToySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dragonToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dragon_toys`.* FROM `dragon_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dragonToyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DragonToySlice")
	}

	*o = slice

	return nil
}

// DragonToyExists checks if the DragonToy row exists.
func DragonToyExists(ctx context.Context, exec boil.ContextExecutor, dragonID string, toyID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dragon_toys` where `dragon_id`=? AND `toy_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dragonID, toyID)
	}
	row := exec.QueryRowContext(ctx, sql, dragonID, toyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dragon_toys exists")
	}

	return exists, nil
}

// Exists checks if the DragonToy row exists.
func (o *DragonToy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DragonToyExists(ctx, exec, o.DragonID, o.ToyID)
}
