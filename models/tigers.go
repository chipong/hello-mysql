// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tiger is an object representing the database table.
type Tiger struct {
	ID   []byte     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.Bytes `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *tigerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tigerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TigerColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var TigerTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "tigers.id",
	Name: "tigers.name",
}

// Generated where

var TigerWhere = struct {
	ID   whereHelper__byte
	Name whereHelpernull_Bytes
}{
	ID:   whereHelper__byte{field: "`tigers`.`id`"},
	Name: whereHelpernull_Bytes{field: "`tigers`.`name`"},
}

// TigerRels is where relationship names are stored.
var TigerRels = struct {
	Elephant string
	Wolf     string
	Ants     string
	Worms    string
}{
	Elephant: "Elephant",
	Wolf:     "Wolf",
	Ants:     "Ants",
	Worms:    "Worms",
}

// tigerR is where relationships are stored.
type tigerR struct {
	Elephant *Elephant `boil:"Elephant" json:"Elephant" toml:"Elephant" yaml:"Elephant"`
	Wolf     *Wolf     `boil:"Wolf" json:"Wolf" toml:"Wolf" yaml:"Wolf"`
	Ants     AntSlice  `boil:"Ants" json:"Ants" toml:"Ants" yaml:"Ants"`
	Worms    WormSlice `boil:"Worms" json:"Worms" toml:"Worms" yaml:"Worms"`
}

// NewStruct creates a new relationship struct
func (*tigerR) NewStruct() *tigerR {
	return &tigerR{}
}

func (r *tigerR) GetElephant() *Elephant {
	if r == nil {
		return nil
	}
	return r.Elephant
}

func (r *tigerR) GetWolf() *Wolf {
	if r == nil {
		return nil
	}
	return r.Wolf
}

func (r *tigerR) GetAnts() AntSlice {
	if r == nil {
		return nil
	}
	return r.Ants
}

func (r *tigerR) GetWorms() WormSlice {
	if r == nil {
		return nil
	}
	return r.Worms
}

// tigerL is where Load methods for each relationship are stored.
type tigerL struct{}

var (
	tigerAllColumns            = []string{"id", "name"}
	tigerColumnsWithoutDefault = []string{"id", "name"}
	tigerColumnsWithDefault    = []string{}
	tigerPrimaryKeyColumns     = []string{"id"}
	tigerGeneratedColumns      = []string{}
)

type (
	// TigerSlice is an alias for a slice of pointers to Tiger.
	// This should almost always be used instead of []Tiger.
	TigerSlice []*Tiger
	// TigerHook is the signature for custom Tiger hook methods
	TigerHook func(context.Context, boil.ContextExecutor, *Tiger) error

	tigerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tigerType                 = reflect.TypeOf(&Tiger{})
	tigerMapping              = queries.MakeStructMapping(tigerType)
	tigerPrimaryKeyMapping, _ = queries.BindMapping(tigerType, tigerMapping, tigerPrimaryKeyColumns)
	tigerInsertCacheMut       sync.RWMutex
	tigerInsertCache          = make(map[string]insertCache)
	tigerUpdateCacheMut       sync.RWMutex
	tigerUpdateCache          = make(map[string]updateCache)
	tigerUpsertCacheMut       sync.RWMutex
	tigerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tigerAfterSelectMu sync.Mutex
var tigerAfterSelectHooks []TigerHook

var tigerBeforeInsertMu sync.Mutex
var tigerBeforeInsertHooks []TigerHook
var tigerAfterInsertMu sync.Mutex
var tigerAfterInsertHooks []TigerHook

var tigerBeforeUpdateMu sync.Mutex
var tigerBeforeUpdateHooks []TigerHook
var tigerAfterUpdateMu sync.Mutex
var tigerAfterUpdateHooks []TigerHook

var tigerBeforeDeleteMu sync.Mutex
var tigerBeforeDeleteHooks []TigerHook
var tigerAfterDeleteMu sync.Mutex
var tigerAfterDeleteHooks []TigerHook

var tigerBeforeUpsertMu sync.Mutex
var tigerBeforeUpsertHooks []TigerHook
var tigerAfterUpsertMu sync.Mutex
var tigerAfterUpsertHooks []TigerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tiger) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tiger) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tiger) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tiger) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tiger) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tiger) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tiger) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tiger) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tiger) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tigerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTigerHook registers your hook function for all future operations.
func AddTigerHook(hookPoint boil.HookPoint, tigerHook TigerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tigerAfterSelectMu.Lock()
		tigerAfterSelectHooks = append(tigerAfterSelectHooks, tigerHook)
		tigerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tigerBeforeInsertMu.Lock()
		tigerBeforeInsertHooks = append(tigerBeforeInsertHooks, tigerHook)
		tigerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tigerAfterInsertMu.Lock()
		tigerAfterInsertHooks = append(tigerAfterInsertHooks, tigerHook)
		tigerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tigerBeforeUpdateMu.Lock()
		tigerBeforeUpdateHooks = append(tigerBeforeUpdateHooks, tigerHook)
		tigerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tigerAfterUpdateMu.Lock()
		tigerAfterUpdateHooks = append(tigerAfterUpdateHooks, tigerHook)
		tigerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tigerBeforeDeleteMu.Lock()
		tigerBeforeDeleteHooks = append(tigerBeforeDeleteHooks, tigerHook)
		tigerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tigerAfterDeleteMu.Lock()
		tigerAfterDeleteHooks = append(tigerAfterDeleteHooks, tigerHook)
		tigerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tigerBeforeUpsertMu.Lock()
		tigerBeforeUpsertHooks = append(tigerBeforeUpsertHooks, tigerHook)
		tigerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tigerAfterUpsertMu.Lock()
		tigerAfterUpsertHooks = append(tigerAfterUpsertHooks, tigerHook)
		tigerAfterUpsertMu.Unlock()
	}
}

// One returns a single tiger record from the query.
func (q tigerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tiger, error) {
	o := &Tiger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tigers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tiger records from the query.
func (q tigerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TigerSlice, error) {
	var o []*Tiger

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tiger slice")
	}

	if len(tigerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tiger records in the query.
func (q tigerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tigers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tigerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tigers exists")
	}

	return count > 0, nil
}

// Elephant pointed to by the foreign key.
func (o *Tiger) Elephant(mods ...qm.QueryMod) elephantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`tiger_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Elephants(queryMods...)
}

// Wolf pointed to by the foreign key.
func (o *Tiger) Wolf(mods ...qm.QueryMod) wolfQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`tiger_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Wolves(queryMods...)
}

// Ants retrieves all the ant's Ants with an executor.
func (o *Tiger) Ants(mods ...qm.QueryMod) antQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ants`.`tiger_id`=?", o.ID),
	)

	return Ants(queryMods...)
}

// Worms retrieves all the worm's Worms with an executor.
func (o *Tiger) Worms(mods ...qm.QueryMod) wormQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`worms`.`tiger_id`=?", o.ID),
	)

	return Worms(queryMods...)
}

// LoadElephant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (tigerL) LoadElephant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTiger interface{}, mods queries.Applicator) error {
	var slice []*Tiger
	var object *Tiger

	if singular {
		var ok bool
		object, ok = maybeTiger.(*Tiger)
		if !ok {
			object = new(Tiger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTiger))
			}
		}
	} else {
		s, ok := maybeTiger.(*[]*Tiger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTiger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tigerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tigerR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`elephants`),
		qm.WhereIn(`elephants.tiger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Elephant")
	}

	var resultSlice []*Elephant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Elephant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for elephants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for elephants")
	}

	if len(elephantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Elephant = foreign
		if foreign.R == nil {
			foreign.R = &elephantR{}
		}
		foreign.R.Tiger = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.TigerID) {
				local.R.Elephant = foreign
				if foreign.R == nil {
					foreign.R = &elephantR{}
				}
				foreign.R.Tiger = local
				break
			}
		}
	}

	return nil
}

// LoadWolf allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (tigerL) LoadWolf(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTiger interface{}, mods queries.Applicator) error {
	var slice []*Tiger
	var object *Tiger

	if singular {
		var ok bool
		object, ok = maybeTiger.(*Tiger)
		if !ok {
			object = new(Tiger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTiger))
			}
		}
	} else {
		s, ok := maybeTiger.(*[]*Tiger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTiger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tigerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tigerR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`wolves`),
		qm.WhereIn(`wolves.tiger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Wolf")
	}

	var resultSlice []*Wolf
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Wolf")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for wolves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wolves")
	}

	if len(wolfAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Wolf = foreign
		if foreign.R == nil {
			foreign.R = &wolfR{}
		}
		foreign.R.Tiger = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.TigerID) {
				local.R.Wolf = foreign
				if foreign.R == nil {
					foreign.R = &wolfR{}
				}
				foreign.R.Tiger = local
				break
			}
		}
	}

	return nil
}

// LoadAnts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tigerL) LoadAnts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTiger interface{}, mods queries.Applicator) error {
	var slice []*Tiger
	var object *Tiger

	if singular {
		var ok bool
		object, ok = maybeTiger.(*Tiger)
		if !ok {
			object = new(Tiger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTiger))
			}
		}
	} else {
		s, ok := maybeTiger.(*[]*Tiger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTiger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tigerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tigerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ants`),
		qm.WhereIn(`ants.tiger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ants")
	}

	var resultSlice []*Ant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ants")
	}

	if len(antAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Ants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &antR{}
			}
			foreign.R.Tiger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TigerID) {
				local.R.Ants = append(local.R.Ants, foreign)
				if foreign.R == nil {
					foreign.R = &antR{}
				}
				foreign.R.Tiger = local
				break
			}
		}
	}

	return nil
}

// LoadWorms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tigerL) LoadWorms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTiger interface{}, mods queries.Applicator) error {
	var slice []*Tiger
	var object *Tiger

	if singular {
		var ok bool
		object, ok = maybeTiger.(*Tiger)
		if !ok {
			object = new(Tiger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTiger))
			}
		}
	} else {
		s, ok := maybeTiger.(*[]*Tiger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTiger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTiger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tigerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tigerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`worms`),
		qm.WhereIn(`worms.tiger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load worms")
	}

	var resultSlice []*Worm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice worms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on worms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for worms")
	}

	if len(wormAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Worms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wormR{}
			}
			foreign.R.Tiger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TigerID) {
				local.R.Worms = append(local.R.Worms, foreign)
				if foreign.R == nil {
					foreign.R = &wormR{}
				}
				foreign.R.Tiger = local
				break
			}
		}
	}

	return nil
}

// SetElephant of the tiger to the related item.
// Sets o.R.Elephant to related.
// Adds o to related.R.Tiger.
func (o *Tiger) SetElephant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Elephant) error {
	var err error

	if insert {
		queries.Assign(&related.TigerID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `elephants` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
			strmangle.WhereClause("`", "`", 0, elephantPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.TigerID, o.ID)
	}

	if o.R == nil {
		o.R = &tigerR{
			Elephant: related,
		}
	} else {
		o.R.Elephant = related
	}

	if related.R == nil {
		related.R = &elephantR{
			Tiger: o,
		}
	} else {
		related.R.Tiger = o
	}
	return nil
}

// RemoveElephant relationship.
// Sets o.R.Elephant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Tiger) RemoveElephant(ctx context.Context, exec boil.ContextExecutor, related *Elephant) error {
	var err error

	queries.SetScanner(&related.TigerID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("tiger_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Elephant = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.Tiger = nil

	return nil
}

// SetWolf of the tiger to the related item.
// Sets o.R.Wolf to related.
// Adds o to related.R.Tiger.
func (o *Tiger) SetWolf(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Wolf) error {
	var err error

	if insert {
		queries.Assign(&related.TigerID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `wolves` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
			strmangle.WhereClause("`", "`", 0, wolfPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.TigerID, o.ID)
	}

	if o.R == nil {
		o.R = &tigerR{
			Wolf: related,
		}
	} else {
		o.R.Wolf = related
	}

	if related.R == nil {
		related.R = &wolfR{
			Tiger: o,
		}
	} else {
		related.R.Tiger = o
	}
	return nil
}

// AddAnts adds the given related objects to the existing relationships
// of the tiger, optionally inserting them as new records.
// Appends related to o.R.Ants.
// Sets related.R.Tiger appropriately.
func (o *Tiger) AddAnts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TigerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ants` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
				strmangle.WhereClause("`", "`", 0, antPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TigerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tigerR{
			Ants: related,
		}
	} else {
		o.R.Ants = append(o.R.Ants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &antR{
				Tiger: o,
			}
		} else {
			rel.R.Tiger = o
		}
	}
	return nil
}

// AddWorms adds the given related objects to the existing relationships
// of the tiger, optionally inserting them as new records.
// Appends related to o.R.Worms.
// Sets related.R.Tiger appropriately.
func (o *Tiger) AddWorms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Worm) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TigerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `worms` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
				strmangle.WhereClause("`", "`", 0, wormPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TigerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tigerR{
			Worms: related,
		}
	} else {
		o.R.Worms = append(o.R.Worms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wormR{
				Tiger: o,
			}
		} else {
			rel.R.Tiger = o
		}
	}
	return nil
}

// SetWorms removes all previously related items of the
// tiger replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tiger's Worms accordingly.
// Replaces o.R.Worms with related.
// Sets related.R.Tiger's Worms accordingly.
func (o *Tiger) SetWorms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Worm) error {
	query := "update `worms` set `tiger_id` = null where `tiger_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Worms {
			queries.SetScanner(&rel.TigerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Tiger = nil
		}
		o.R.Worms = nil
	}

	return o.AddWorms(ctx, exec, insert, related...)
}

// RemoveWorms relationships from objects passed in.
// Removes related items from R.Worms (uses pointer comparison, removal does not keep order)
// Sets related.R.Tiger.
func (o *Tiger) RemoveWorms(ctx context.Context, exec boil.ContextExecutor, related ...*Worm) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TigerID, nil)
		if rel.R != nil {
			rel.R.Tiger = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tiger_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Worms {
			if rel != ri {
				continue
			}

			ln := len(o.R.Worms)
			if ln > 1 && i < ln-1 {
				o.R.Worms[i] = o.R.Worms[ln-1]
			}
			o.R.Worms = o.R.Worms[:ln-1]
			break
		}
	}

	return nil
}

// Tigers retrieves all the records using an executor.
func Tigers(mods ...qm.QueryMod) tigerQuery {
	mods = append(mods, qm.From("`tigers`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tigers`.*"})
	}

	return tigerQuery{q}
}

// FindTiger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTiger(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Tiger, error) {
	tigerObj := &Tiger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tigers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tigerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tigers")
	}

	if err = tigerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tigerObj, err
	}

	return tigerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tiger) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tigers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tigerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tigerInsertCacheMut.RLock()
	cache, cached := tigerInsertCache[key]
	tigerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tigerAllColumns,
			tigerColumnsWithDefault,
			tigerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tigerType, tigerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tigerType, tigerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tigers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tigers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tigers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tigerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tigers")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tigers")
	}

CacheNoHooks:
	if !cached {
		tigerInsertCacheMut.Lock()
		tigerInsertCache[key] = cache
		tigerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tiger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tiger) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tigerUpdateCacheMut.RLock()
	cache, cached := tigerUpdateCache[key]
	tigerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tigerAllColumns,
			tigerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tigers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tigers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tigerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tigerType, tigerMapping, append(wl, tigerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tigers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tigers")
	}

	if !cached {
		tigerUpdateCacheMut.Lock()
		tigerUpdateCache[key] = cache
		tigerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tigerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tigers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tigers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TigerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tigerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tigers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tigerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tiger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tiger")
	}
	return rowsAff, nil
}

var mySQLTigerUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tiger) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tigers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tigerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTigerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tigerUpsertCacheMut.RLock()
	cache, cached := tigerUpsertCache[key]
	tigerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tigerAllColumns,
			tigerColumnsWithDefault,
			tigerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tigerAllColumns,
			tigerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tigers, could not build update column list")
		}

		ret := strmangle.SetComplement(tigerAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`tigers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tigers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tigerType, tigerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tigerType, tigerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tigers")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tigerType, tigerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tigers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tigers")
	}

CacheNoHooks:
	if !cached {
		tigerUpsertCacheMut.Lock()
		tigerUpsertCache[key] = cache
		tigerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tiger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tiger) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tiger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tigerPrimaryKeyMapping)
	sql := "DELETE FROM `tigers` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tigers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tigers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tigerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tigerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tigers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tigers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TigerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tigerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tigerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tigers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tigerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tiger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tigers")
	}

	if len(tigerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tiger) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTiger(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TigerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TigerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tigerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tigers`.* FROM `tigers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tigerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TigerSlice")
	}

	*o = slice

	return nil
}

// TigerExists checks if the Tiger row exists.
func TigerExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tigers` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tigers exists")
	}

	return exists, nil
}

// Exists checks if the Tiger row exists.
func (o *Tiger) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TigerExists(ctx, exec, o.ID)
}
