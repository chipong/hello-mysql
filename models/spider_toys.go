// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SpiderToy is an object representing the database table.
type SpiderToy struct {
	SpiderID string      `boil:"spider_id" json:"spider_id" toml:"spider_id" yaml:"spider_id"`
	Name     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *spiderToyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spiderToyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpiderToyColumns = struct {
	SpiderID string
	Name     string
}{
	SpiderID: "spider_id",
	Name:     "name",
}

var SpiderToyTableColumns = struct {
	SpiderID string
	Name     string
}{
	SpiderID: "spider_toys.spider_id",
	Name:     "spider_toys.name",
}

// Generated where

var SpiderToyWhere = struct {
	SpiderID whereHelperstring
	Name     whereHelpernull_String
}{
	SpiderID: whereHelperstring{field: "`spider_toys`.`spider_id`"},
	Name:     whereHelpernull_String{field: "`spider_toys`.`name`"},
}

// SpiderToyRels is where relationship names are stored.
var SpiderToyRels = struct {
}{}

// spiderToyR is where relationships are stored.
type spiderToyR struct {
}

// NewStruct creates a new relationship struct
func (*spiderToyR) NewStruct() *spiderToyR {
	return &spiderToyR{}
}

// spiderToyL is where Load methods for each relationship are stored.
type spiderToyL struct{}

var (
	spiderToyAllColumns            = []string{"spider_id", "name"}
	spiderToyColumnsWithoutDefault = []string{"spider_id", "name"}
	spiderToyColumnsWithDefault    = []string{}
	spiderToyPrimaryKeyColumns     = []string{"spider_id"}
	spiderToyGeneratedColumns      = []string{}
)

type (
	// SpiderToySlice is an alias for a slice of pointers to SpiderToy.
	// This should almost always be used instead of []SpiderToy.
	SpiderToySlice []*SpiderToy
	// SpiderToyHook is the signature for custom SpiderToy hook methods
	SpiderToyHook func(context.Context, boil.ContextExecutor, *SpiderToy) error

	spiderToyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spiderToyType                 = reflect.TypeOf(&SpiderToy{})
	spiderToyMapping              = queries.MakeStructMapping(spiderToyType)
	spiderToyPrimaryKeyMapping, _ = queries.BindMapping(spiderToyType, spiderToyMapping, spiderToyPrimaryKeyColumns)
	spiderToyInsertCacheMut       sync.RWMutex
	spiderToyInsertCache          = make(map[string]insertCache)
	spiderToyUpdateCacheMut       sync.RWMutex
	spiderToyUpdateCache          = make(map[string]updateCache)
	spiderToyUpsertCacheMut       sync.RWMutex
	spiderToyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var spiderToyAfterSelectMu sync.Mutex
var spiderToyAfterSelectHooks []SpiderToyHook

var spiderToyBeforeInsertMu sync.Mutex
var spiderToyBeforeInsertHooks []SpiderToyHook
var spiderToyAfterInsertMu sync.Mutex
var spiderToyAfterInsertHooks []SpiderToyHook

var spiderToyBeforeUpdateMu sync.Mutex
var spiderToyBeforeUpdateHooks []SpiderToyHook
var spiderToyAfterUpdateMu sync.Mutex
var spiderToyAfterUpdateHooks []SpiderToyHook

var spiderToyBeforeDeleteMu sync.Mutex
var spiderToyBeforeDeleteHooks []SpiderToyHook
var spiderToyAfterDeleteMu sync.Mutex
var spiderToyAfterDeleteHooks []SpiderToyHook

var spiderToyBeforeUpsertMu sync.Mutex
var spiderToyBeforeUpsertHooks []SpiderToyHook
var spiderToyAfterUpsertMu sync.Mutex
var spiderToyAfterUpsertHooks []SpiderToyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SpiderToy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SpiderToy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SpiderToy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SpiderToy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SpiderToy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SpiderToy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SpiderToy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SpiderToy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SpiderToy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spiderToyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpiderToyHook registers your hook function for all future operations.
func AddSpiderToyHook(hookPoint boil.HookPoint, spiderToyHook SpiderToyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		spiderToyAfterSelectMu.Lock()
		spiderToyAfterSelectHooks = append(spiderToyAfterSelectHooks, spiderToyHook)
		spiderToyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		spiderToyBeforeInsertMu.Lock()
		spiderToyBeforeInsertHooks = append(spiderToyBeforeInsertHooks, spiderToyHook)
		spiderToyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		spiderToyAfterInsertMu.Lock()
		spiderToyAfterInsertHooks = append(spiderToyAfterInsertHooks, spiderToyHook)
		spiderToyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		spiderToyBeforeUpdateMu.Lock()
		spiderToyBeforeUpdateHooks = append(spiderToyBeforeUpdateHooks, spiderToyHook)
		spiderToyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		spiderToyAfterUpdateMu.Lock()
		spiderToyAfterUpdateHooks = append(spiderToyAfterUpdateHooks, spiderToyHook)
		spiderToyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		spiderToyBeforeDeleteMu.Lock()
		spiderToyBeforeDeleteHooks = append(spiderToyBeforeDeleteHooks, spiderToyHook)
		spiderToyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		spiderToyAfterDeleteMu.Lock()
		spiderToyAfterDeleteHooks = append(spiderToyAfterDeleteHooks, spiderToyHook)
		spiderToyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		spiderToyBeforeUpsertMu.Lock()
		spiderToyBeforeUpsertHooks = append(spiderToyBeforeUpsertHooks, spiderToyHook)
		spiderToyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		spiderToyAfterUpsertMu.Lock()
		spiderToyAfterUpsertHooks = append(spiderToyAfterUpsertHooks, spiderToyHook)
		spiderToyAfterUpsertMu.Unlock()
	}
}

// One returns a single spiderToy record from the query.
func (q spiderToyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpiderToy, error) {
	o := &SpiderToy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for spider_toys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SpiderToy records from the query.
func (q spiderToyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpiderToySlice, error) {
	var o []*SpiderToy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SpiderToy slice")
	}

	if len(spiderToyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SpiderToy records in the query.
func (q spiderToyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count spider_toys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q spiderToyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if spider_toys exists")
	}

	return count > 0, nil
}

// SpiderToys retrieves all the records using an executor.
func SpiderToys(mods ...qm.QueryMod) spiderToyQuery {
	mods = append(mods, qm.From("`spider_toys`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`spider_toys`.*"})
	}

	return spiderToyQuery{q}
}

// FindSpiderToy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpiderToy(ctx context.Context, exec boil.ContextExecutor, spiderID string, selectCols ...string) (*SpiderToy, error) {
	spiderToyObj := &SpiderToy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `spider_toys` where `spider_id`=?", sel,
	)

	q := queries.Raw(query, spiderID)

	err := q.Bind(ctx, exec, spiderToyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from spider_toys")
	}

	if err = spiderToyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return spiderToyObj, err
	}

	return spiderToyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SpiderToy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spider_toys provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spiderToyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spiderToyInsertCacheMut.RLock()
	cache, cached := spiderToyInsertCache[key]
	spiderToyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spiderToyAllColumns,
			spiderToyColumnsWithDefault,
			spiderToyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(spiderToyType, spiderToyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spiderToyType, spiderToyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `spider_toys` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `spider_toys` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `spider_toys` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, spiderToyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into spider_toys")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SpiderID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for spider_toys")
	}

CacheNoHooks:
	if !cached {
		spiderToyInsertCacheMut.Lock()
		spiderToyInsertCache[key] = cache
		spiderToyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SpiderToy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SpiderToy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	spiderToyUpdateCacheMut.RLock()
	cache, cached := spiderToyUpdateCache[key]
	spiderToyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spiderToyAllColumns,
			spiderToyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update spider_toys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `spider_toys` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, spiderToyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spiderToyType, spiderToyMapping, append(wl, spiderToyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update spider_toys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for spider_toys")
	}

	if !cached {
		spiderToyUpdateCacheMut.Lock()
		spiderToyUpdateCache[key] = cache
		spiderToyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q spiderToyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for spider_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for spider_toys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpiderToySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spiderToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `spider_toys` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spiderToyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in spiderToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all spiderToy")
	}
	return rowsAff, nil
}

var mySQLSpiderToyUniqueColumns = []string{
	"spider_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SpiderToy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spider_toys provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spiderToyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSpiderToyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spiderToyUpsertCacheMut.RLock()
	cache, cached := spiderToyUpsertCache[key]
	spiderToyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			spiderToyAllColumns,
			spiderToyColumnsWithDefault,
			spiderToyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			spiderToyAllColumns,
			spiderToyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert spider_toys, could not build update column list")
		}

		ret := strmangle.SetComplement(spiderToyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`spider_toys`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `spider_toys` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(spiderToyType, spiderToyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spiderToyType, spiderToyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for spider_toys")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(spiderToyType, spiderToyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for spider_toys")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for spider_toys")
	}

CacheNoHooks:
	if !cached {
		spiderToyUpsertCacheMut.Lock()
		spiderToyUpsertCache[key] = cache
		spiderToyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SpiderToy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SpiderToy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SpiderToy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spiderToyPrimaryKeyMapping)
	sql := "DELETE FROM `spider_toys` WHERE `spider_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from spider_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for spider_toys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q spiderToyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no spiderToyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spider_toys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spider_toys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpiderToySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(spiderToyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spiderToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `spider_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spiderToyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spiderToy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spider_toys")
	}

	if len(spiderToyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SpiderToy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpiderToy(ctx, exec, o.SpiderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpiderToySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpiderToySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spiderToyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `spider_toys`.* FROM `spider_toys` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spiderToyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpiderToySlice")
	}

	*o = slice

	return nil
}

// SpiderToyExists checks if the SpiderToy row exists.
func SpiderToyExists(ctx context.Context, exec boil.ContextExecutor, spiderID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `spider_toys` where `spider_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, spiderID)
	}
	row := exec.QueryRowContext(ctx, sql, spiderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if spider_toys exists")
	}

	return exists, nil
}

// Exists checks if the SpiderToy row exists.
func (o *SpiderToy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SpiderToyExists(ctx, exec, o.SpiderID)
}
