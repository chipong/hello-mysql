// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Worm is an object representing the database table.
type Worm struct {
	ID      []byte     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    []byte     `boil:"name" json:"name" toml:"name" yaml:"name"`
	TigerID null.Bytes `boil:"tiger_id" json:"tiger_id,omitempty" toml:"tiger_id" yaml:"tiger_id,omitempty"`

	R *wormR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wormL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WormColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "id",
	Name:    "name",
	TigerID: "tiger_id",
}

var WormTableColumns = struct {
	ID      string
	Name    string
	TigerID string
}{
	ID:      "worms.id",
	Name:    "worms.name",
	TigerID: "worms.tiger_id",
}

// Generated where

var WormWhere = struct {
	ID      whereHelper__byte
	Name    whereHelper__byte
	TigerID whereHelpernull_Bytes
}{
	ID:      whereHelper__byte{field: "`worms`.`id`"},
	Name:    whereHelper__byte{field: "`worms`.`name`"},
	TigerID: whereHelpernull_Bytes{field: "`worms`.`tiger_id`"},
}

// WormRels is where relationship names are stored.
var WormRels = struct {
	Tiger string
}{
	Tiger: "Tiger",
}

// wormR is where relationships are stored.
type wormR struct {
	Tiger *Tiger `boil:"Tiger" json:"Tiger" toml:"Tiger" yaml:"Tiger"`
}

// NewStruct creates a new relationship struct
func (*wormR) NewStruct() *wormR {
	return &wormR{}
}

func (r *wormR) GetTiger() *Tiger {
	if r == nil {
		return nil
	}
	return r.Tiger
}

// wormL is where Load methods for each relationship are stored.
type wormL struct{}

var (
	wormAllColumns            = []string{"id", "name", "tiger_id"}
	wormColumnsWithoutDefault = []string{"id", "name", "tiger_id"}
	wormColumnsWithDefault    = []string{}
	wormPrimaryKeyColumns     = []string{"id"}
	wormGeneratedColumns      = []string{}
)

type (
	// WormSlice is an alias for a slice of pointers to Worm.
	// This should almost always be used instead of []Worm.
	WormSlice []*Worm
	// WormHook is the signature for custom Worm hook methods
	WormHook func(context.Context, boil.ContextExecutor, *Worm) error

	wormQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wormType                 = reflect.TypeOf(&Worm{})
	wormMapping              = queries.MakeStructMapping(wormType)
	wormPrimaryKeyMapping, _ = queries.BindMapping(wormType, wormMapping, wormPrimaryKeyColumns)
	wormInsertCacheMut       sync.RWMutex
	wormInsertCache          = make(map[string]insertCache)
	wormUpdateCacheMut       sync.RWMutex
	wormUpdateCache          = make(map[string]updateCache)
	wormUpsertCacheMut       sync.RWMutex
	wormUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wormAfterSelectMu sync.Mutex
var wormAfterSelectHooks []WormHook

var wormBeforeInsertMu sync.Mutex
var wormBeforeInsertHooks []WormHook
var wormAfterInsertMu sync.Mutex
var wormAfterInsertHooks []WormHook

var wormBeforeUpdateMu sync.Mutex
var wormBeforeUpdateHooks []WormHook
var wormAfterUpdateMu sync.Mutex
var wormAfterUpdateHooks []WormHook

var wormBeforeDeleteMu sync.Mutex
var wormBeforeDeleteHooks []WormHook
var wormAfterDeleteMu sync.Mutex
var wormAfterDeleteHooks []WormHook

var wormBeforeUpsertMu sync.Mutex
var wormBeforeUpsertHooks []WormHook
var wormAfterUpsertMu sync.Mutex
var wormAfterUpsertHooks []WormHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Worm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Worm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Worm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Worm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Worm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Worm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Worm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Worm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Worm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wormAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWormHook registers your hook function for all future operations.
func AddWormHook(hookPoint boil.HookPoint, wormHook WormHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wormAfterSelectMu.Lock()
		wormAfterSelectHooks = append(wormAfterSelectHooks, wormHook)
		wormAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		wormBeforeInsertMu.Lock()
		wormBeforeInsertHooks = append(wormBeforeInsertHooks, wormHook)
		wormBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		wormAfterInsertMu.Lock()
		wormAfterInsertHooks = append(wormAfterInsertHooks, wormHook)
		wormAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		wormBeforeUpdateMu.Lock()
		wormBeforeUpdateHooks = append(wormBeforeUpdateHooks, wormHook)
		wormBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		wormAfterUpdateMu.Lock()
		wormAfterUpdateHooks = append(wormAfterUpdateHooks, wormHook)
		wormAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		wormBeforeDeleteMu.Lock()
		wormBeforeDeleteHooks = append(wormBeforeDeleteHooks, wormHook)
		wormBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		wormAfterDeleteMu.Lock()
		wormAfterDeleteHooks = append(wormAfterDeleteHooks, wormHook)
		wormAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		wormBeforeUpsertMu.Lock()
		wormBeforeUpsertHooks = append(wormBeforeUpsertHooks, wormHook)
		wormBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		wormAfterUpsertMu.Lock()
		wormAfterUpsertHooks = append(wormAfterUpsertHooks, wormHook)
		wormAfterUpsertMu.Unlock()
	}
}

// One returns a single worm record from the query.
func (q wormQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Worm, error) {
	o := &Worm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for worms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Worm records from the query.
func (q wormQuery) All(ctx context.Context, exec boil.ContextExecutor) (WormSlice, error) {
	var o []*Worm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Worm slice")
	}

	if len(wormAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Worm records in the query.
func (q wormQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count worms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wormQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if worms exists")
	}

	return count > 0, nil
}

// Tiger pointed to by the foreign key.
func (o *Worm) Tiger(mods ...qm.QueryMod) tigerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TigerID),
	}

	queryMods = append(queryMods, mods...)

	return Tigers(queryMods...)
}

// LoadTiger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wormL) LoadTiger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorm interface{}, mods queries.Applicator) error {
	var slice []*Worm
	var object *Worm

	if singular {
		var ok bool
		object, ok = maybeWorm.(*Worm)
		if !ok {
			object = new(Worm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWorm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWorm))
			}
		}
	} else {
		s, ok := maybeWorm.(*[]*Worm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWorm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWorm))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &wormR{}
		}
		if !queries.IsNil(object.TigerID) {
			args[object.TigerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wormR{}
			}

			if !queries.IsNil(obj.TigerID) {
				args[obj.TigerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tigers`),
		qm.WhereIn(`tigers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tiger")
	}

	var resultSlice []*Tiger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tiger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tigers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tigers")
	}

	if len(tigerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tiger = foreign
		if foreign.R == nil {
			foreign.R = &tigerR{}
		}
		foreign.R.Worms = append(foreign.R.Worms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TigerID, foreign.ID) {
				local.R.Tiger = foreign
				if foreign.R == nil {
					foreign.R = &tigerR{}
				}
				foreign.R.Worms = append(foreign.R.Worms, local)
				break
			}
		}
	}

	return nil
}

// SetTiger of the worm to the related item.
// Sets o.R.Tiger to related.
// Adds o to related.R.Worms.
func (o *Worm) SetTiger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tiger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `worms` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tiger_id"}),
		strmangle.WhereClause("`", "`", 0, wormPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TigerID, related.ID)
	if o.R == nil {
		o.R = &wormR{
			Tiger: related,
		}
	} else {
		o.R.Tiger = related
	}

	if related.R == nil {
		related.R = &tigerR{
			Worms: WormSlice{o},
		}
	} else {
		related.R.Worms = append(related.R.Worms, o)
	}

	return nil
}

// RemoveTiger relationship.
// Sets o.R.Tiger to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Worm) RemoveTiger(ctx context.Context, exec boil.ContextExecutor, related *Tiger) error {
	var err error

	queries.SetScanner(&o.TigerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tiger_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Tiger = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Worms {
		if queries.Equal(o.TigerID, ri.TigerID) {
			continue
		}

		ln := len(related.R.Worms)
		if ln > 1 && i < ln-1 {
			related.R.Worms[i] = related.R.Worms[ln-1]
		}
		related.R.Worms = related.R.Worms[:ln-1]
		break
	}
	return nil
}

// Worms retrieves all the records using an executor.
func Worms(mods ...qm.QueryMod) wormQuery {
	mods = append(mods, qm.From("`worms`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`worms`.*"})
	}

	return wormQuery{q}
}

// FindWorm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorm(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Worm, error) {
	wormObj := &Worm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `worms` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wormObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from worms")
	}

	if err = wormObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wormObj, err
	}

	return wormObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Worm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no worms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wormColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wormInsertCacheMut.RLock()
	cache, cached := wormInsertCache[key]
	wormInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wormAllColumns,
			wormColumnsWithDefault,
			wormColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wormType, wormMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wormType, wormMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `worms` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `worms` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `worms` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, wormPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into worms")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for worms")
	}

CacheNoHooks:
	if !cached {
		wormInsertCacheMut.Lock()
		wormInsertCache[key] = cache
		wormInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Worm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Worm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wormUpdateCacheMut.RLock()
	cache, cached := wormUpdateCache[key]
	wormUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wormAllColumns,
			wormPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update worms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `worms` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, wormPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wormType, wormMapping, append(wl, wormPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update worms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for worms")
	}

	if !cached {
		wormUpdateCacheMut.Lock()
		wormUpdateCache[key] = cache
		wormUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wormQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for worms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for worms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WormSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `worms` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wormPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in worm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all worm")
	}
	return rowsAff, nil
}

var mySQLWormUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Worm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no worms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wormColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWormUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wormUpsertCacheMut.RLock()
	cache, cached := wormUpsertCache[key]
	wormUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			wormAllColumns,
			wormColumnsWithDefault,
			wormColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wormAllColumns,
			wormPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert worms, could not build update column list")
		}

		ret := strmangle.SetComplement(wormAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`worms`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `worms` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(wormType, wormMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wormType, wormMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for worms")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(wormType, wormMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for worms")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for worms")
	}

CacheNoHooks:
	if !cached {
		wormUpsertCacheMut.Lock()
		wormUpsertCache[key] = cache
		wormUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Worm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Worm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Worm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wormPrimaryKeyMapping)
	sql := "DELETE FROM `worms` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from worms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for worms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wormQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wormQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from worms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for worms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WormSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wormBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `worms` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wormPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from worm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for worms")
	}

	if len(wormAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Worm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WormSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WormSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `worms`.* FROM `worms` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wormPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WormSlice")
	}

	*o = slice

	return nil
}

// WormExists checks if the Worm row exists.
func WormExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `worms` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if worms exists")
	}

	return exists, nil
}

// Exists checks if the Worm row exists.
func (o *Worm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WormExists(ctx, exec, o.ID)
}
