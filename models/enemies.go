// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Enemy is an object representing the database table.
type Enemy struct {
	Enemies string      `boil:"enemies" json:"enemies" toml:"enemies" yaml:"enemies"`
	Name    null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *enemyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L enemyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EnemyColumns = struct {
	Enemies string
	Name    string
}{
	Enemies: "enemies",
	Name:    "name",
}

var EnemyTableColumns = struct {
	Enemies string
	Name    string
}{
	Enemies: "enemies.enemies",
	Name:    "enemies.name",
}

// Generated where

var EnemyWhere = struct {
	Enemies whereHelperstring
	Name    whereHelpernull_String
}{
	Enemies: whereHelperstring{field: "`enemies`.`enemies`"},
	Name:    whereHelpernull_String{field: "`enemies`.`name`"},
}

// EnemyRels is where relationship names are stored.
var EnemyRels = struct {
}{}

// enemyR is where relationships are stored.
type enemyR struct {
}

// NewStruct creates a new relationship struct
func (*enemyR) NewStruct() *enemyR {
	return &enemyR{}
}

// enemyL is where Load methods for each relationship are stored.
type enemyL struct{}

var (
	enemyAllColumns            = []string{"enemies", "name"}
	enemyColumnsWithoutDefault = []string{"enemies", "name"}
	enemyColumnsWithDefault    = []string{}
	enemyPrimaryKeyColumns     = []string{"enemies"}
	enemyGeneratedColumns      = []string{}
)

type (
	// EnemySlice is an alias for a slice of pointers to Enemy.
	// This should almost always be used instead of []Enemy.
	EnemySlice []*Enemy
	// EnemyHook is the signature for custom Enemy hook methods
	EnemyHook func(context.Context, boil.ContextExecutor, *Enemy) error

	enemyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	enemyType                 = reflect.TypeOf(&Enemy{})
	enemyMapping              = queries.MakeStructMapping(enemyType)
	enemyPrimaryKeyMapping, _ = queries.BindMapping(enemyType, enemyMapping, enemyPrimaryKeyColumns)
	enemyInsertCacheMut       sync.RWMutex
	enemyInsertCache          = make(map[string]insertCache)
	enemyUpdateCacheMut       sync.RWMutex
	enemyUpdateCache          = make(map[string]updateCache)
	enemyUpsertCacheMut       sync.RWMutex
	enemyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var enemyAfterSelectMu sync.Mutex
var enemyAfterSelectHooks []EnemyHook

var enemyBeforeInsertMu sync.Mutex
var enemyBeforeInsertHooks []EnemyHook
var enemyAfterInsertMu sync.Mutex
var enemyAfterInsertHooks []EnemyHook

var enemyBeforeUpdateMu sync.Mutex
var enemyBeforeUpdateHooks []EnemyHook
var enemyAfterUpdateMu sync.Mutex
var enemyAfterUpdateHooks []EnemyHook

var enemyBeforeDeleteMu sync.Mutex
var enemyBeforeDeleteHooks []EnemyHook
var enemyAfterDeleteMu sync.Mutex
var enemyAfterDeleteHooks []EnemyHook

var enemyBeforeUpsertMu sync.Mutex
var enemyBeforeUpsertHooks []EnemyHook
var enemyAfterUpsertMu sync.Mutex
var enemyAfterUpsertHooks []EnemyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Enemy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Enemy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Enemy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Enemy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Enemy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Enemy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Enemy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Enemy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Enemy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range enemyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEnemyHook registers your hook function for all future operations.
func AddEnemyHook(hookPoint boil.HookPoint, enemyHook EnemyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		enemyAfterSelectMu.Lock()
		enemyAfterSelectHooks = append(enemyAfterSelectHooks, enemyHook)
		enemyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		enemyBeforeInsertMu.Lock()
		enemyBeforeInsertHooks = append(enemyBeforeInsertHooks, enemyHook)
		enemyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		enemyAfterInsertMu.Lock()
		enemyAfterInsertHooks = append(enemyAfterInsertHooks, enemyHook)
		enemyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		enemyBeforeUpdateMu.Lock()
		enemyBeforeUpdateHooks = append(enemyBeforeUpdateHooks, enemyHook)
		enemyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		enemyAfterUpdateMu.Lock()
		enemyAfterUpdateHooks = append(enemyAfterUpdateHooks, enemyHook)
		enemyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		enemyBeforeDeleteMu.Lock()
		enemyBeforeDeleteHooks = append(enemyBeforeDeleteHooks, enemyHook)
		enemyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		enemyAfterDeleteMu.Lock()
		enemyAfterDeleteHooks = append(enemyAfterDeleteHooks, enemyHook)
		enemyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		enemyBeforeUpsertMu.Lock()
		enemyBeforeUpsertHooks = append(enemyBeforeUpsertHooks, enemyHook)
		enemyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		enemyAfterUpsertMu.Lock()
		enemyAfterUpsertHooks = append(enemyAfterUpsertHooks, enemyHook)
		enemyAfterUpsertMu.Unlock()
	}
}

// One returns a single enemy record from the query.
func (q enemyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Enemy, error) {
	o := &Enemy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for enemies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Enemy records from the query.
func (q enemyQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnemySlice, error) {
	var o []*Enemy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Enemy slice")
	}

	if len(enemyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Enemy records in the query.
func (q enemyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count enemies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q enemyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if enemies exists")
	}

	return count > 0, nil
}

// Enemies retrieves all the records using an executor.
func Enemies(mods ...qm.QueryMod) enemyQuery {
	mods = append(mods, qm.From("`enemies`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`enemies`.*"})
	}

	return enemyQuery{q}
}

// FindEnemy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEnemy(ctx context.Context, exec boil.ContextExecutor, enemies string, selectCols ...string) (*Enemy, error) {
	enemyObj := &Enemy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `enemies` where `enemies`=?", sel,
	)

	q := queries.Raw(query, enemies)

	err := q.Bind(ctx, exec, enemyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from enemies")
	}

	if err = enemyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return enemyObj, err
	}

	return enemyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Enemy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no enemies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(enemyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	enemyInsertCacheMut.RLock()
	cache, cached := enemyInsertCache[key]
	enemyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			enemyAllColumns,
			enemyColumnsWithDefault,
			enemyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(enemyType, enemyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(enemyType, enemyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `enemies` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `enemies` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `enemies` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, enemyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into enemies")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Enemies,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for enemies")
	}

CacheNoHooks:
	if !cached {
		enemyInsertCacheMut.Lock()
		enemyInsertCache[key] = cache
		enemyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Enemy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Enemy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	enemyUpdateCacheMut.RLock()
	cache, cached := enemyUpdateCache[key]
	enemyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			enemyAllColumns,
			enemyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update enemies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `enemies` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, enemyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(enemyType, enemyMapping, append(wl, enemyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update enemies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for enemies")
	}

	if !cached {
		enemyUpdateCacheMut.Lock()
		enemyUpdateCache[key] = cache
		enemyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q enemyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for enemies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for enemies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EnemySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), enemyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `enemies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, enemyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in enemy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all enemy")
	}
	return rowsAff, nil
}

var mySQLEnemyUniqueColumns = []string{
	"enemies",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Enemy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no enemies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(enemyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEnemyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	enemyUpsertCacheMut.RLock()
	cache, cached := enemyUpsertCache[key]
	enemyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			enemyAllColumns,
			enemyColumnsWithDefault,
			enemyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			enemyAllColumns,
			enemyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert enemies, could not build update column list")
		}

		ret := strmangle.SetComplement(enemyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`enemies`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `enemies` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(enemyType, enemyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(enemyType, enemyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for enemies")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(enemyType, enemyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for enemies")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for enemies")
	}

CacheNoHooks:
	if !cached {
		enemyUpsertCacheMut.Lock()
		enemyUpsertCache[key] = cache
		enemyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Enemy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Enemy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Enemy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), enemyPrimaryKeyMapping)
	sql := "DELETE FROM `enemies` WHERE `enemies`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from enemies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for enemies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q enemyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no enemyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from enemies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for enemies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EnemySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(enemyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), enemyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `enemies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, enemyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from enemy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for enemies")
	}

	if len(enemyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Enemy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEnemy(ctx, exec, o.Enemies)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EnemySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EnemySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), enemyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `enemies`.* FROM `enemies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, enemyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EnemySlice")
	}

	*o = slice

	return nil
}

// EnemyExists checks if the Enemy row exists.
func EnemyExists(ctx context.Context, exec boil.ContextExecutor, enemies string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `enemies` where `enemies`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, enemies)
	}
	row := exec.QueryRowContext(ctx, sql, enemies)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if enemies exists")
	}

	return exists, nil
}

// Exists checks if the Enemy row exists.
func (o *Enemy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EnemyExists(ctx, exec, o.Enemies)
}
