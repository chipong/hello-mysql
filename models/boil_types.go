// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type EventOneDay string

// Enum values for EventOneDay
const (
	EventOneDayMonday    EventOneDay = "monday"
	EventOneDayTuesday   EventOneDay = "tuesday"
	EventOneDayWednesday EventOneDay = "wednesday"
)

func AllEventOneDay() []EventOneDay {
	return []EventOneDay{
		EventOneDayMonday,
		EventOneDayTuesday,
		EventOneDayWednesday,
	}
}

func (e EventOneDay) IsValid() error {
	switch e {
	case EventOneDayMonday, EventOneDayTuesday, EventOneDayWednesday:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EventOneDay) String() string {
	return string(e)
}

func (e EventOneDay) Ordinal() int {
	switch e {
	case EventOneDayMonday:
		return 0
	case EventOneDayTuesday:
		return 1
	case EventOneDayWednesday:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// EventOneNullDay is a nullable EventOneDay enum type. It supports SQL and JSON serialization.
type EventOneNullDay struct {
	Val   EventOneDay
	Valid bool
}

// EventOneNullDayFrom creates a new EventOneDay that will never be blank.
func EventOneNullDayFrom(v EventOneDay) EventOneNullDay {
	return NewEventOneNullDay(v, true)
}

// EventOneNullDayFromPtr creates a new EventOneNullDay that be null if s is nil.
func EventOneNullDayFromPtr(v *EventOneDay) EventOneNullDay {
	if v == nil {
		return NewEventOneNullDay("", false)
	}
	return NewEventOneNullDay(*v, true)
}

// NewEventOneNullDay creates a new EventOneNullDay
func NewEventOneNullDay(v EventOneDay, valid bool) EventOneNullDay {
	return EventOneNullDay{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EventOneNullDay) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e EventOneNullDay) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e EventOneNullDay) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *EventOneNullDay) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = EventOneDay(text)
	e.Valid = true
	return nil
}

// SetValid changes this EventOneNullDay value and also sets it to be non-null.
func (e *EventOneNullDay) SetValid(v EventOneDay) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this EventOneNullDay value, or a nil pointer if this EventOneNullDay is null.
func (e EventOneNullDay) Ptr() *EventOneDay {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e EventOneNullDay) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *EventOneNullDay) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e EventOneNullDay) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type EventThreeFace string

// Enum values for EventThreeFace
const (
	EventThreeFaceHappy  EventThreeFace = "happy"
	EventThreeFaceSad    EventThreeFace = "sad"
	EventThreeFaceBitter EventThreeFace = "bitter"
)

func AllEventThreeFace() []EventThreeFace {
	return []EventThreeFace{
		EventThreeFaceHappy,
		EventThreeFaceSad,
		EventThreeFaceBitter,
	}
}

func (e EventThreeFace) IsValid() error {
	switch e {
	case EventThreeFaceHappy, EventThreeFaceSad, EventThreeFaceBitter:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EventThreeFace) String() string {
	return string(e)
}

func (e EventThreeFace) Ordinal() int {
	switch e {
	case EventThreeFaceHappy:
		return 0
	case EventThreeFaceSad:
		return 1
	case EventThreeFaceBitter:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// EventThreeNullFace is a nullable EventThreeFace enum type. It supports SQL and JSON serialization.
type EventThreeNullFace struct {
	Val   EventThreeFace
	Valid bool
}

// EventThreeNullFaceFrom creates a new EventThreeFace that will never be blank.
func EventThreeNullFaceFrom(v EventThreeFace) EventThreeNullFace {
	return NewEventThreeNullFace(v, true)
}

// EventThreeNullFaceFromPtr creates a new EventThreeNullFace that be null if s is nil.
func EventThreeNullFaceFromPtr(v *EventThreeFace) EventThreeNullFace {
	if v == nil {
		return NewEventThreeNullFace("", false)
	}
	return NewEventThreeNullFace(*v, true)
}

// NewEventThreeNullFace creates a new EventThreeNullFace
func NewEventThreeNullFace(v EventThreeFace, valid bool) EventThreeNullFace {
	return EventThreeNullFace{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EventThreeNullFace) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e EventThreeNullFace) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e EventThreeNullFace) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *EventThreeNullFace) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = EventThreeFace(text)
	e.Valid = true
	return nil
}

// SetValid changes this EventThreeNullFace value and also sets it to be non-null.
func (e *EventThreeNullFace) SetValid(v EventThreeFace) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this EventThreeNullFace value, or a nil pointer if this EventThreeNullFace is null.
func (e EventThreeNullFace) Ptr() *EventThreeFace {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e EventThreeNullFace) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *EventThreeNullFace) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e EventThreeNullFace) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type EventThreeMood string

// Enum values for EventThreeMood
const (
	EventThreeMoodHappy  EventThreeMood = "happy"
	EventThreeMoodSad    EventThreeMood = "sad"
	EventThreeMoodBitter EventThreeMood = "bitter"
)

func AllEventThreeMood() []EventThreeMood {
	return []EventThreeMood{
		EventThreeMoodHappy,
		EventThreeMoodSad,
		EventThreeMoodBitter,
	}
}

func (e EventThreeMood) IsValid() error {
	switch e {
	case EventThreeMoodHappy, EventThreeMoodSad, EventThreeMoodBitter:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EventThreeMood) String() string {
	return string(e)
}

func (e EventThreeMood) Ordinal() int {
	switch e {
	case EventThreeMoodHappy:
		return 0
	case EventThreeMoodSad:
		return 1
	case EventThreeMoodBitter:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// EventThreeNullMood is a nullable EventThreeMood enum type. It supports SQL and JSON serialization.
type EventThreeNullMood struct {
	Val   EventThreeMood
	Valid bool
}

// EventThreeNullMoodFrom creates a new EventThreeMood that will never be blank.
func EventThreeNullMoodFrom(v EventThreeMood) EventThreeNullMood {
	return NewEventThreeNullMood(v, true)
}

// EventThreeNullMoodFromPtr creates a new EventThreeNullMood that be null if s is nil.
func EventThreeNullMoodFromPtr(v *EventThreeMood) EventThreeNullMood {
	if v == nil {
		return NewEventThreeNullMood("", false)
	}
	return NewEventThreeNullMood(*v, true)
}

// NewEventThreeNullMood creates a new EventThreeNullMood
func NewEventThreeNullMood(v EventThreeMood, valid bool) EventThreeNullMood {
	return EventThreeNullMood{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EventThreeNullMood) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e EventThreeNullMood) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e EventThreeNullMood) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *EventThreeNullMood) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = EventThreeMood(text)
	e.Valid = true
	return nil
}

// SetValid changes this EventThreeNullMood value and also sets it to be non-null.
func (e *EventThreeNullMood) SetValid(v EventThreeMood) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this EventThreeNullMood value, or a nil pointer if this EventThreeNullMood is null.
func (e EventThreeNullMood) Ptr() *EventThreeMood {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e EventThreeNullMood) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *EventThreeNullMood) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e EventThreeNullMood) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type EventThreeDay string

// Enum values for EventThreeDay
const (
	EventThreeDayMonday    EventThreeDay = "monday"
	EventThreeDayTuesday   EventThreeDay = "tuesday"
	EventThreeDayWednesday EventThreeDay = "wednesday"
)

func AllEventThreeDay() []EventThreeDay {
	return []EventThreeDay{
		EventThreeDayMonday,
		EventThreeDayTuesday,
		EventThreeDayWednesday,
	}
}

func (e EventThreeDay) IsValid() error {
	switch e {
	case EventThreeDayMonday, EventThreeDayTuesday, EventThreeDayWednesday:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EventThreeDay) String() string {
	return string(e)
}

func (e EventThreeDay) Ordinal() int {
	switch e {
	case EventThreeDayMonday:
		return 0
	case EventThreeDayTuesday:
		return 1
	case EventThreeDayWednesday:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// EventThreeNullDay is a nullable EventThreeDay enum type. It supports SQL and JSON serialization.
type EventThreeNullDay struct {
	Val   EventThreeDay
	Valid bool
}

// EventThreeNullDayFrom creates a new EventThreeDay that will never be blank.
func EventThreeNullDayFrom(v EventThreeDay) EventThreeNullDay {
	return NewEventThreeNullDay(v, true)
}

// EventThreeNullDayFromPtr creates a new EventThreeNullDay that be null if s is nil.
func EventThreeNullDayFromPtr(v *EventThreeDay) EventThreeNullDay {
	if v == nil {
		return NewEventThreeNullDay("", false)
	}
	return NewEventThreeNullDay(*v, true)
}

// NewEventThreeNullDay creates a new EventThreeNullDay
func NewEventThreeNullDay(v EventThreeDay, valid bool) EventThreeNullDay {
	return EventThreeNullDay{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EventThreeNullDay) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e EventThreeNullDay) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e EventThreeNullDay) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *EventThreeNullDay) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = EventThreeDay(text)
	e.Valid = true
	return nil
}

// SetValid changes this EventThreeNullDay value and also sets it to be non-null.
func (e *EventThreeNullDay) SetValid(v EventThreeDay) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this EventThreeNullDay value, or a nil pointer if this EventThreeNullDay is null.
func (e EventThreeNullDay) Ptr() *EventThreeDay {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e EventThreeNullDay) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *EventThreeNullDay) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e EventThreeNullDay) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type EventTwoFace string

// Enum values for EventTwoFace
const (
	EventTwoFaceHappy  EventTwoFace = "happy"
	EventTwoFaceSad    EventTwoFace = "sad"
	EventTwoFaceBitter EventTwoFace = "bitter"
)

func AllEventTwoFace() []EventTwoFace {
	return []EventTwoFace{
		EventTwoFaceHappy,
		EventTwoFaceSad,
		EventTwoFaceBitter,
	}
}

func (e EventTwoFace) IsValid() error {
	switch e {
	case EventTwoFaceHappy, EventTwoFaceSad, EventTwoFaceBitter:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EventTwoFace) String() string {
	return string(e)
}

func (e EventTwoFace) Ordinal() int {
	switch e {
	case EventTwoFaceHappy:
		return 0
	case EventTwoFaceSad:
		return 1
	case EventTwoFaceBitter:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// EventTwoNullFace is a nullable EventTwoFace enum type. It supports SQL and JSON serialization.
type EventTwoNullFace struct {
	Val   EventTwoFace
	Valid bool
}

// EventTwoNullFaceFrom creates a new EventTwoFace that will never be blank.
func EventTwoNullFaceFrom(v EventTwoFace) EventTwoNullFace {
	return NewEventTwoNullFace(v, true)
}

// EventTwoNullFaceFromPtr creates a new EventTwoNullFace that be null if s is nil.
func EventTwoNullFaceFromPtr(v *EventTwoFace) EventTwoNullFace {
	if v == nil {
		return NewEventTwoNullFace("", false)
	}
	return NewEventTwoNullFace(*v, true)
}

// NewEventTwoNullFace creates a new EventTwoNullFace
func NewEventTwoNullFace(v EventTwoFace, valid bool) EventTwoNullFace {
	return EventTwoNullFace{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EventTwoNullFace) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e EventTwoNullFace) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e EventTwoNullFace) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *EventTwoNullFace) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = EventTwoFace(text)
	e.Valid = true
	return nil
}

// SetValid changes this EventTwoNullFace value and also sets it to be non-null.
func (e *EventTwoNullFace) SetValid(v EventTwoFace) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this EventTwoNullFace value, or a nil pointer if this EventTwoNullFace is null.
func (e EventTwoNullFace) Ptr() *EventTwoFace {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e EventTwoNullFace) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *EventTwoNullFace) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e EventTwoNullFace) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}
