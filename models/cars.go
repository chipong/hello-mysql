// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Car is an object representing the database table.
type Car struct {
	ID   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *carR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L carL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CarColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var CarTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "cars.id",
	Name: "cars.name",
}

// Generated where

var CarWhere = struct {
	ID   whereHelperint
	Name whereHelpernull_String
}{
	ID:   whereHelperint{field: "`cars`.`id`"},
	Name: whereHelpernull_String{field: "`cars`.`name`"},
}

// CarRels is where relationship names are stored.
var CarRels = struct {
	CarCars           string
	AwesomeCarCarCars string
}{
	CarCars:           "CarCars",
	AwesomeCarCarCars: "AwesomeCarCarCars",
}

// carR is where relationships are stored.
type carR struct {
	CarCars           CarCarSlice `boil:"CarCars" json:"CarCars" toml:"CarCars" yaml:"CarCars"`
	AwesomeCarCarCars CarCarSlice `boil:"AwesomeCarCarCars" json:"AwesomeCarCarCars" toml:"AwesomeCarCarCars" yaml:"AwesomeCarCarCars"`
}

// NewStruct creates a new relationship struct
func (*carR) NewStruct() *carR {
	return &carR{}
}

func (r *carR) GetCarCars() CarCarSlice {
	if r == nil {
		return nil
	}
	return r.CarCars
}

func (r *carR) GetAwesomeCarCarCars() CarCarSlice {
	if r == nil {
		return nil
	}
	return r.AwesomeCarCarCars
}

// carL is where Load methods for each relationship are stored.
type carL struct{}

var (
	carAllColumns            = []string{"id", "name"}
	carColumnsWithoutDefault = []string{"id", "name"}
	carColumnsWithDefault    = []string{}
	carPrimaryKeyColumns     = []string{"id"}
	carGeneratedColumns      = []string{}
)

type (
	// CarSlice is an alias for a slice of pointers to Car.
	// This should almost always be used instead of []Car.
	CarSlice []*Car
	// CarHook is the signature for custom Car hook methods
	CarHook func(context.Context, boil.ContextExecutor, *Car) error

	carQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	carType                 = reflect.TypeOf(&Car{})
	carMapping              = queries.MakeStructMapping(carType)
	carPrimaryKeyMapping, _ = queries.BindMapping(carType, carMapping, carPrimaryKeyColumns)
	carInsertCacheMut       sync.RWMutex
	carInsertCache          = make(map[string]insertCache)
	carUpdateCacheMut       sync.RWMutex
	carUpdateCache          = make(map[string]updateCache)
	carUpsertCacheMut       sync.RWMutex
	carUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var carAfterSelectMu sync.Mutex
var carAfterSelectHooks []CarHook

var carBeforeInsertMu sync.Mutex
var carBeforeInsertHooks []CarHook
var carAfterInsertMu sync.Mutex
var carAfterInsertHooks []CarHook

var carBeforeUpdateMu sync.Mutex
var carBeforeUpdateHooks []CarHook
var carAfterUpdateMu sync.Mutex
var carAfterUpdateHooks []CarHook

var carBeforeDeleteMu sync.Mutex
var carBeforeDeleteHooks []CarHook
var carAfterDeleteMu sync.Mutex
var carAfterDeleteHooks []CarHook

var carBeforeUpsertMu sync.Mutex
var carBeforeUpsertHooks []CarHook
var carAfterUpsertMu sync.Mutex
var carAfterUpsertHooks []CarHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Car) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Car) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Car) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Car) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Car) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Car) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Car) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Car) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Car) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCarHook registers your hook function for all future operations.
func AddCarHook(hookPoint boil.HookPoint, carHook CarHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		carAfterSelectMu.Lock()
		carAfterSelectHooks = append(carAfterSelectHooks, carHook)
		carAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		carBeforeInsertMu.Lock()
		carBeforeInsertHooks = append(carBeforeInsertHooks, carHook)
		carBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		carAfterInsertMu.Lock()
		carAfterInsertHooks = append(carAfterInsertHooks, carHook)
		carAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		carBeforeUpdateMu.Lock()
		carBeforeUpdateHooks = append(carBeforeUpdateHooks, carHook)
		carBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		carAfterUpdateMu.Lock()
		carAfterUpdateHooks = append(carAfterUpdateHooks, carHook)
		carAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		carBeforeDeleteMu.Lock()
		carBeforeDeleteHooks = append(carBeforeDeleteHooks, carHook)
		carBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		carAfterDeleteMu.Lock()
		carAfterDeleteHooks = append(carAfterDeleteHooks, carHook)
		carAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		carBeforeUpsertMu.Lock()
		carBeforeUpsertHooks = append(carBeforeUpsertHooks, carHook)
		carBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		carAfterUpsertMu.Lock()
		carAfterUpsertHooks = append(carAfterUpsertHooks, carHook)
		carAfterUpsertMu.Unlock()
	}
}

// One returns a single car record from the query.
func (q carQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Car, error) {
	o := &Car{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cars")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Car records from the query.
func (q carQuery) All(ctx context.Context, exec boil.ContextExecutor) (CarSlice, error) {
	var o []*Car

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Car slice")
	}

	if len(carAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Car records in the query.
func (q carQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cars rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q carQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cars exists")
	}

	return count > 0, nil
}

// CarCars retrieves all the car_car's CarCars with an executor.
func (o *Car) CarCars(mods ...qm.QueryMod) carCarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`car_cars`.`car_id`=?", o.ID),
	)

	return CarCars(queryMods...)
}

// AwesomeCarCarCars retrieves all the car_car's CarCars with an executor via awesome_car_id column.
func (o *Car) AwesomeCarCarCars(mods ...qm.QueryMod) carCarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`car_cars`.`awesome_car_id`=?", o.ID),
	)

	return CarCars(queryMods...)
}

// LoadCarCars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (carL) LoadCarCars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCar interface{}, mods queries.Applicator) error {
	var slice []*Car
	var object *Car

	if singular {
		var ok bool
		object, ok = maybeCar.(*Car)
		if !ok {
			object = new(Car)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCar))
			}
		}
	} else {
		s, ok := maybeCar.(*[]*Car)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCar))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &carR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`car_cars`),
		qm.WhereIn(`car_cars.car_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load car_cars")
	}

	var resultSlice []*CarCar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice car_cars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on car_cars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for car_cars")
	}

	if len(carCarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CarCars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &carCarR{}
			}
			foreign.R.Car = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CarID {
				local.R.CarCars = append(local.R.CarCars, foreign)
				if foreign.R == nil {
					foreign.R = &carCarR{}
				}
				foreign.R.Car = local
				break
			}
		}
	}

	return nil
}

// LoadAwesomeCarCarCars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (carL) LoadAwesomeCarCarCars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCar interface{}, mods queries.Applicator) error {
	var slice []*Car
	var object *Car

	if singular {
		var ok bool
		object, ok = maybeCar.(*Car)
		if !ok {
			object = new(Car)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCar))
			}
		}
	} else {
		s, ok := maybeCar.(*[]*Car)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCar)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCar))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &carR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`car_cars`),
		qm.WhereIn(`car_cars.awesome_car_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load car_cars")
	}

	var resultSlice []*CarCar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice car_cars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on car_cars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for car_cars")
	}

	if len(carCarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AwesomeCarCarCars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &carCarR{}
			}
			foreign.R.AwesomeCar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AwesomeCarID {
				local.R.AwesomeCarCarCars = append(local.R.AwesomeCarCarCars, foreign)
				if foreign.R == nil {
					foreign.R = &carCarR{}
				}
				foreign.R.AwesomeCar = local
				break
			}
		}
	}

	return nil
}

// AddCarCars adds the given related objects to the existing relationships
// of the car, optionally inserting them as new records.
// Appends related to o.R.CarCars.
// Sets related.R.Car appropriately.
func (o *Car) AddCarCars(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CarCar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CarID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `car_cars` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"car_id"}),
				strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CarID, rel.AwesomeCarID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CarID = o.ID
		}
	}

	if o.R == nil {
		o.R = &carR{
			CarCars: related,
		}
	} else {
		o.R.CarCars = append(o.R.CarCars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &carCarR{
				Car: o,
			}
		} else {
			rel.R.Car = o
		}
	}
	return nil
}

// AddAwesomeCarCarCars adds the given related objects to the existing relationships
// of the car, optionally inserting them as new records.
// Appends related to o.R.AwesomeCarCarCars.
// Sets related.R.AwesomeCar appropriately.
func (o *Car) AddAwesomeCarCarCars(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CarCar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AwesomeCarID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `car_cars` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"awesome_car_id"}),
				strmangle.WhereClause("`", "`", 0, carCarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CarID, rel.AwesomeCarID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AwesomeCarID = o.ID
		}
	}

	if o.R == nil {
		o.R = &carR{
			AwesomeCarCarCars: related,
		}
	} else {
		o.R.AwesomeCarCarCars = append(o.R.AwesomeCarCarCars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &carCarR{
				AwesomeCar: o,
			}
		} else {
			rel.R.AwesomeCar = o
		}
	}
	return nil
}

// Cars retrieves all the records using an executor.
func Cars(mods ...qm.QueryMod) carQuery {
	mods = append(mods, qm.From("`cars`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`cars`.*"})
	}

	return carQuery{q}
}

// FindCar retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Car, error) {
	carObj := &Car{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cars` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, carObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cars")
	}

	if err = carObj.doAfterSelectHooks(ctx, exec); err != nil {
		return carObj, err
	}

	return carObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Car) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cars provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	carInsertCacheMut.RLock()
	cache, cached := carInsertCache[key]
	carInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			carAllColumns,
			carColumnsWithDefault,
			carColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(carType, carMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(carType, carMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cars` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cars` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cars` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, carPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cars")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cars")
	}

CacheNoHooks:
	if !cached {
		carInsertCacheMut.Lock()
		carInsertCache[key] = cache
		carInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Car.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Car) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	carUpdateCacheMut.RLock()
	cache, cached := carUpdateCache[key]
	carUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			carAllColumns,
			carPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cars, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cars` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, carPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(carType, carMapping, append(wl, carPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cars row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cars")
	}

	if !cached {
		carUpdateCacheMut.Lock()
		carUpdateCache[key] = cache
		carUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q carQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cars")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CarSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cars` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in car slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all car")
	}
	return rowsAff, nil
}

var mySQLCarUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Car) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cars provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCarUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	carUpsertCacheMut.RLock()
	cache, cached := carUpsertCache[key]
	carUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			carAllColumns,
			carColumnsWithDefault,
			carColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			carAllColumns,
			carPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cars, could not build update column list")
		}

		ret := strmangle.SetComplement(carAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`cars`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cars` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(carType, carMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(carType, carMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cars")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(carType, carMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cars")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cars")
	}

CacheNoHooks:
	if !cached {
		carUpsertCacheMut.Lock()
		carUpsertCache[key] = cache
		carUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Car record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Car) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Car provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), carPrimaryKeyMapping)
	sql := "DELETE FROM `cars` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cars")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q carQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no carQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cars")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CarSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(carBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cars` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from car slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cars")
	}

	if len(carAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Car) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCar(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CarSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CarSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cars`.* FROM `cars` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, carPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CarSlice")
	}

	*o = slice

	return nil
}

// CarExists checks if the Car row exists.
func CarExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cars` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cars exists")
	}

	return exists, nil
}

// Exists checks if the Car row exists.
func (o *Car) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CarExists(ctx, exec, o.ID)
}
