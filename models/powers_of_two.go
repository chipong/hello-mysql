// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PowersOfTwo is an object representing the database table.
type PowersOfTwo struct {
	Vid         uint        `boil:"vid" json:"vid" toml:"vid" yaml:"vid"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	MachineName string      `boil:"machine_name" json:"machine_name" toml:"machine_name" yaml:"machine_name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Hierarchy   uint8       `boil:"hierarchy" json:"hierarchy" toml:"hierarchy" yaml:"hierarchy"`
	Module      string      `boil:"module" json:"module" toml:"module" yaml:"module"`
	Weight      int         `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`

	R *powersOfTwoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powersOfTwoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowersOfTwoColumns = struct {
	Vid         string
	Name        string
	MachineName string
	Description string
	Hierarchy   string
	Module      string
	Weight      string
}{
	Vid:         "vid",
	Name:        "name",
	MachineName: "machine_name",
	Description: "description",
	Hierarchy:   "hierarchy",
	Module:      "module",
	Weight:      "weight",
}

var PowersOfTwoTableColumns = struct {
	Vid         string
	Name        string
	MachineName string
	Description string
	Hierarchy   string
	Module      string
	Weight      string
}{
	Vid:         "powers_of_two.vid",
	Name:        "powers_of_two.name",
	MachineName: "powers_of_two.machine_name",
	Description: "powers_of_two.description",
	Hierarchy:   "powers_of_two.hierarchy",
	Module:      "powers_of_two.module",
	Weight:      "powers_of_two.weight",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PowersOfTwoWhere = struct {
	Vid         whereHelperuint
	Name        whereHelperstring
	MachineName whereHelperstring
	Description whereHelpernull_String
	Hierarchy   whereHelperuint8
	Module      whereHelperstring
	Weight      whereHelperint
}{
	Vid:         whereHelperuint{field: "`powers_of_two`.`vid`"},
	Name:        whereHelperstring{field: "`powers_of_two`.`name`"},
	MachineName: whereHelperstring{field: "`powers_of_two`.`machine_name`"},
	Description: whereHelpernull_String{field: "`powers_of_two`.`description`"},
	Hierarchy:   whereHelperuint8{field: "`powers_of_two`.`hierarchy`"},
	Module:      whereHelperstring{field: "`powers_of_two`.`module`"},
	Weight:      whereHelperint{field: "`powers_of_two`.`weight`"},
}

// PowersOfTwoRels is where relationship names are stored.
var PowersOfTwoRels = struct {
}{}

// powersOfTwoR is where relationships are stored.
type powersOfTwoR struct {
}

// NewStruct creates a new relationship struct
func (*powersOfTwoR) NewStruct() *powersOfTwoR {
	return &powersOfTwoR{}
}

// powersOfTwoL is where Load methods for each relationship are stored.
type powersOfTwoL struct{}

var (
	powersOfTwoAllColumns            = []string{"vid", "name", "machine_name", "description", "hierarchy", "module", "weight"}
	powersOfTwoColumnsWithoutDefault = []string{"name", "machine_name", "description", "module"}
	powersOfTwoColumnsWithDefault    = []string{"vid", "hierarchy", "weight"}
	powersOfTwoPrimaryKeyColumns     = []string{"vid"}
	powersOfTwoGeneratedColumns      = []string{}
)

type (
	// PowersOfTwoSlice is an alias for a slice of pointers to PowersOfTwo.
	// This should almost always be used instead of []PowersOfTwo.
	PowersOfTwoSlice []*PowersOfTwo
	// PowersOfTwoHook is the signature for custom PowersOfTwo hook methods
	PowersOfTwoHook func(context.Context, boil.ContextExecutor, *PowersOfTwo) error

	powersOfTwoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powersOfTwoType                 = reflect.TypeOf(&PowersOfTwo{})
	powersOfTwoMapping              = queries.MakeStructMapping(powersOfTwoType)
	powersOfTwoPrimaryKeyMapping, _ = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, powersOfTwoPrimaryKeyColumns)
	powersOfTwoInsertCacheMut       sync.RWMutex
	powersOfTwoInsertCache          = make(map[string]insertCache)
	powersOfTwoUpdateCacheMut       sync.RWMutex
	powersOfTwoUpdateCache          = make(map[string]updateCache)
	powersOfTwoUpsertCacheMut       sync.RWMutex
	powersOfTwoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var powersOfTwoAfterSelectMu sync.Mutex
var powersOfTwoAfterSelectHooks []PowersOfTwoHook

var powersOfTwoBeforeInsertMu sync.Mutex
var powersOfTwoBeforeInsertHooks []PowersOfTwoHook
var powersOfTwoAfterInsertMu sync.Mutex
var powersOfTwoAfterInsertHooks []PowersOfTwoHook

var powersOfTwoBeforeUpdateMu sync.Mutex
var powersOfTwoBeforeUpdateHooks []PowersOfTwoHook
var powersOfTwoAfterUpdateMu sync.Mutex
var powersOfTwoAfterUpdateHooks []PowersOfTwoHook

var powersOfTwoBeforeDeleteMu sync.Mutex
var powersOfTwoBeforeDeleteHooks []PowersOfTwoHook
var powersOfTwoAfterDeleteMu sync.Mutex
var powersOfTwoAfterDeleteHooks []PowersOfTwoHook

var powersOfTwoBeforeUpsertMu sync.Mutex
var powersOfTwoBeforeUpsertHooks []PowersOfTwoHook
var powersOfTwoAfterUpsertMu sync.Mutex
var powersOfTwoAfterUpsertHooks []PowersOfTwoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PowersOfTwo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PowersOfTwo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PowersOfTwo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PowersOfTwo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PowersOfTwo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PowersOfTwo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PowersOfTwo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PowersOfTwo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PowersOfTwo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range powersOfTwoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPowersOfTwoHook registers your hook function for all future operations.
func AddPowersOfTwoHook(hookPoint boil.HookPoint, powersOfTwoHook PowersOfTwoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		powersOfTwoAfterSelectMu.Lock()
		powersOfTwoAfterSelectHooks = append(powersOfTwoAfterSelectHooks, powersOfTwoHook)
		powersOfTwoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		powersOfTwoBeforeInsertMu.Lock()
		powersOfTwoBeforeInsertHooks = append(powersOfTwoBeforeInsertHooks, powersOfTwoHook)
		powersOfTwoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		powersOfTwoAfterInsertMu.Lock()
		powersOfTwoAfterInsertHooks = append(powersOfTwoAfterInsertHooks, powersOfTwoHook)
		powersOfTwoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		powersOfTwoBeforeUpdateMu.Lock()
		powersOfTwoBeforeUpdateHooks = append(powersOfTwoBeforeUpdateHooks, powersOfTwoHook)
		powersOfTwoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		powersOfTwoAfterUpdateMu.Lock()
		powersOfTwoAfterUpdateHooks = append(powersOfTwoAfterUpdateHooks, powersOfTwoHook)
		powersOfTwoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		powersOfTwoBeforeDeleteMu.Lock()
		powersOfTwoBeforeDeleteHooks = append(powersOfTwoBeforeDeleteHooks, powersOfTwoHook)
		powersOfTwoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		powersOfTwoAfterDeleteMu.Lock()
		powersOfTwoAfterDeleteHooks = append(powersOfTwoAfterDeleteHooks, powersOfTwoHook)
		powersOfTwoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		powersOfTwoBeforeUpsertMu.Lock()
		powersOfTwoBeforeUpsertHooks = append(powersOfTwoBeforeUpsertHooks, powersOfTwoHook)
		powersOfTwoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		powersOfTwoAfterUpsertMu.Lock()
		powersOfTwoAfterUpsertHooks = append(powersOfTwoAfterUpsertHooks, powersOfTwoHook)
		powersOfTwoAfterUpsertMu.Unlock()
	}
}

// One returns a single powersOfTwo record from the query.
func (q powersOfTwoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PowersOfTwo, error) {
	o := &PowersOfTwo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for powers_of_two")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PowersOfTwo records from the query.
func (q powersOfTwoQuery) All(ctx context.Context, exec boil.ContextExecutor) (PowersOfTwoSlice, error) {
	var o []*PowersOfTwo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PowersOfTwo slice")
	}

	if len(powersOfTwoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PowersOfTwo records in the query.
func (q powersOfTwoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count powers_of_two rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q powersOfTwoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if powers_of_two exists")
	}

	return count > 0, nil
}

// PowersOfTwos retrieves all the records using an executor.
func PowersOfTwos(mods ...qm.QueryMod) powersOfTwoQuery {
	mods = append(mods, qm.From("`powers_of_two`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`powers_of_two`.*"})
	}

	return powersOfTwoQuery{q}
}

// FindPowersOfTwo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowersOfTwo(ctx context.Context, exec boil.ContextExecutor, vid uint, selectCols ...string) (*PowersOfTwo, error) {
	powersOfTwoObj := &PowersOfTwo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `powers_of_two` where `vid`=?", sel,
	)

	q := queries.Raw(query, vid)

	err := q.Bind(ctx, exec, powersOfTwoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from powers_of_two")
	}

	if err = powersOfTwoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return powersOfTwoObj, err
	}

	return powersOfTwoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PowersOfTwo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no powers_of_two provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powersOfTwoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	powersOfTwoInsertCacheMut.RLock()
	cache, cached := powersOfTwoInsertCache[key]
	powersOfTwoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			powersOfTwoAllColumns,
			powersOfTwoColumnsWithDefault,
			powersOfTwoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `powers_of_two` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `powers_of_two` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `powers_of_two` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, powersOfTwoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into powers_of_two")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Vid = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == powersOfTwoMapping["vid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Vid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for powers_of_two")
	}

CacheNoHooks:
	if !cached {
		powersOfTwoInsertCacheMut.Lock()
		powersOfTwoInsertCache[key] = cache
		powersOfTwoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PowersOfTwo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PowersOfTwo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	powersOfTwoUpdateCacheMut.RLock()
	cache, cached := powersOfTwoUpdateCache[key]
	powersOfTwoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			powersOfTwoAllColumns,
			powersOfTwoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update powers_of_two, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `powers_of_two` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, powersOfTwoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, append(wl, powersOfTwoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update powers_of_two row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for powers_of_two")
	}

	if !cached {
		powersOfTwoUpdateCacheMut.Lock()
		powersOfTwoUpdateCache[key] = cache
		powersOfTwoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q powersOfTwoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for powers_of_two")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for powers_of_two")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowersOfTwoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powersOfTwoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `powers_of_two` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powersOfTwoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in powersOfTwo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all powersOfTwo")
	}
	return rowsAff, nil
}

var mySQLPowersOfTwoUniqueColumns = []string{
	"vid",
	"machine_name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PowersOfTwo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no powers_of_two provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(powersOfTwoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPowersOfTwoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powersOfTwoUpsertCacheMut.RLock()
	cache, cached := powersOfTwoUpsertCache[key]
	powersOfTwoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			powersOfTwoAllColumns,
			powersOfTwoColumnsWithDefault,
			powersOfTwoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			powersOfTwoAllColumns,
			powersOfTwoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert powers_of_two, could not build update column list")
		}

		ret := strmangle.SetComplement(powersOfTwoAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`powers_of_two`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `powers_of_two` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for powers_of_two")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Vid = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == powersOfTwoMapping["vid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(powersOfTwoType, powersOfTwoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for powers_of_two")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for powers_of_two")
	}

CacheNoHooks:
	if !cached {
		powersOfTwoUpsertCacheMut.Lock()
		powersOfTwoUpsertCache[key] = cache
		powersOfTwoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PowersOfTwo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PowersOfTwo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PowersOfTwo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powersOfTwoPrimaryKeyMapping)
	sql := "DELETE FROM `powers_of_two` WHERE `vid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from powers_of_two")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for powers_of_two")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q powersOfTwoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no powersOfTwoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from powers_of_two")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for powers_of_two")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowersOfTwoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(powersOfTwoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powersOfTwoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `powers_of_two` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powersOfTwoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from powersOfTwo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for powers_of_two")
	}

	if len(powersOfTwoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PowersOfTwo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPowersOfTwo(ctx, exec, o.Vid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowersOfTwoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PowersOfTwoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powersOfTwoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `powers_of_two`.* FROM `powers_of_two` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powersOfTwoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PowersOfTwoSlice")
	}

	*o = slice

	return nil
}

// PowersOfTwoExists checks if the PowersOfTwo row exists.
func PowersOfTwoExists(ctx context.Context, exec boil.ContextExecutor, vid uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `powers_of_two` where `vid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vid)
	}
	row := exec.QueryRowContext(ctx, sql, vid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if powers_of_two exists")
	}

	return exists, nil
}

// Exists checks if the PowersOfTwo row exists.
func (o *PowersOfTwo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PowersOfTwoExists(ctx, exec, o.Vid)
}
