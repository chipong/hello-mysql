// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BytePilot is an object representing the database table.
type BytePilot struct {
	ID   []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *bytePilotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bytePilotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BytePilotColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var BytePilotTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "byte_pilots.id",
	Name: "byte_pilots.name",
}

// Generated where

var BytePilotWhere = struct {
	ID   whereHelper__byte
	Name whereHelpernull_String
}{
	ID:   whereHelper__byte{field: "`byte_pilots`.`id`"},
	Name: whereHelpernull_String{field: "`byte_pilots`.`name`"},
}

// BytePilotRels is where relationship names are stored.
var BytePilotRels = struct {
	ByteJet       string
	ByteLanguages string
}{
	ByteJet:       "ByteJet",
	ByteLanguages: "ByteLanguages",
}

// bytePilotR is where relationships are stored.
type bytePilotR struct {
	ByteJet       *ByteJet          `boil:"ByteJet" json:"ByteJet" toml:"ByteJet" yaml:"ByteJet"`
	ByteLanguages ByteLanguageSlice `boil:"ByteLanguages" json:"ByteLanguages" toml:"ByteLanguages" yaml:"ByteLanguages"`
}

// NewStruct creates a new relationship struct
func (*bytePilotR) NewStruct() *bytePilotR {
	return &bytePilotR{}
}

func (r *bytePilotR) GetByteJet() *ByteJet {
	if r == nil {
		return nil
	}
	return r.ByteJet
}

func (r *bytePilotR) GetByteLanguages() ByteLanguageSlice {
	if r == nil {
		return nil
	}
	return r.ByteLanguages
}

// bytePilotL is where Load methods for each relationship are stored.
type bytePilotL struct{}

var (
	bytePilotAllColumns            = []string{"id", "name"}
	bytePilotColumnsWithoutDefault = []string{"id", "name"}
	bytePilotColumnsWithDefault    = []string{}
	bytePilotPrimaryKeyColumns     = []string{"id"}
	bytePilotGeneratedColumns      = []string{}
)

type (
	// BytePilotSlice is an alias for a slice of pointers to BytePilot.
	// This should almost always be used instead of []BytePilot.
	BytePilotSlice []*BytePilot
	// BytePilotHook is the signature for custom BytePilot hook methods
	BytePilotHook func(context.Context, boil.ContextExecutor, *BytePilot) error

	bytePilotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bytePilotType                 = reflect.TypeOf(&BytePilot{})
	bytePilotMapping              = queries.MakeStructMapping(bytePilotType)
	bytePilotPrimaryKeyMapping, _ = queries.BindMapping(bytePilotType, bytePilotMapping, bytePilotPrimaryKeyColumns)
	bytePilotInsertCacheMut       sync.RWMutex
	bytePilotInsertCache          = make(map[string]insertCache)
	bytePilotUpdateCacheMut       sync.RWMutex
	bytePilotUpdateCache          = make(map[string]updateCache)
	bytePilotUpsertCacheMut       sync.RWMutex
	bytePilotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bytePilotAfterSelectMu sync.Mutex
var bytePilotAfterSelectHooks []BytePilotHook

var bytePilotBeforeInsertMu sync.Mutex
var bytePilotBeforeInsertHooks []BytePilotHook
var bytePilotAfterInsertMu sync.Mutex
var bytePilotAfterInsertHooks []BytePilotHook

var bytePilotBeforeUpdateMu sync.Mutex
var bytePilotBeforeUpdateHooks []BytePilotHook
var bytePilotAfterUpdateMu sync.Mutex
var bytePilotAfterUpdateHooks []BytePilotHook

var bytePilotBeforeDeleteMu sync.Mutex
var bytePilotBeforeDeleteHooks []BytePilotHook
var bytePilotAfterDeleteMu sync.Mutex
var bytePilotAfterDeleteHooks []BytePilotHook

var bytePilotBeforeUpsertMu sync.Mutex
var bytePilotBeforeUpsertHooks []BytePilotHook
var bytePilotAfterUpsertMu sync.Mutex
var bytePilotAfterUpsertHooks []BytePilotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BytePilot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BytePilot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BytePilot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BytePilot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BytePilot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BytePilot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BytePilot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BytePilot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BytePilot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bytePilotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBytePilotHook registers your hook function for all future operations.
func AddBytePilotHook(hookPoint boil.HookPoint, bytePilotHook BytePilotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bytePilotAfterSelectMu.Lock()
		bytePilotAfterSelectHooks = append(bytePilotAfterSelectHooks, bytePilotHook)
		bytePilotAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bytePilotBeforeInsertMu.Lock()
		bytePilotBeforeInsertHooks = append(bytePilotBeforeInsertHooks, bytePilotHook)
		bytePilotBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bytePilotAfterInsertMu.Lock()
		bytePilotAfterInsertHooks = append(bytePilotAfterInsertHooks, bytePilotHook)
		bytePilotAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bytePilotBeforeUpdateMu.Lock()
		bytePilotBeforeUpdateHooks = append(bytePilotBeforeUpdateHooks, bytePilotHook)
		bytePilotBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bytePilotAfterUpdateMu.Lock()
		bytePilotAfterUpdateHooks = append(bytePilotAfterUpdateHooks, bytePilotHook)
		bytePilotAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bytePilotBeforeDeleteMu.Lock()
		bytePilotBeforeDeleteHooks = append(bytePilotBeforeDeleteHooks, bytePilotHook)
		bytePilotBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bytePilotAfterDeleteMu.Lock()
		bytePilotAfterDeleteHooks = append(bytePilotAfterDeleteHooks, bytePilotHook)
		bytePilotAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bytePilotBeforeUpsertMu.Lock()
		bytePilotBeforeUpsertHooks = append(bytePilotBeforeUpsertHooks, bytePilotHook)
		bytePilotBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bytePilotAfterUpsertMu.Lock()
		bytePilotAfterUpsertHooks = append(bytePilotAfterUpsertHooks, bytePilotHook)
		bytePilotAfterUpsertMu.Unlock()
	}
}

// One returns a single bytePilot record from the query.
func (q bytePilotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BytePilot, error) {
	o := &BytePilot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for byte_pilots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BytePilot records from the query.
func (q bytePilotQuery) All(ctx context.Context, exec boil.ContextExecutor) (BytePilotSlice, error) {
	var o []*BytePilot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BytePilot slice")
	}

	if len(bytePilotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BytePilot records in the query.
func (q bytePilotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count byte_pilots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bytePilotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if byte_pilots exists")
	}

	return count > 0, nil
}

// ByteJet pointed to by the foreign key.
func (o *BytePilot) ByteJet(mods ...qm.QueryMod) byteJetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`byte_pilot_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return ByteJets(queryMods...)
}

// ByteLanguages retrieves all the byte_language's ByteLanguages with an executor.
func (o *BytePilot) ByteLanguages(mods ...qm.QueryMod) byteLanguageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`byte_pilot_languages` on `byte_languages`.`id` = `byte_pilot_languages`.`byte_language_id`"),
		qm.Where("`byte_pilot_languages`.`byte_pilot_id`=?", o.ID),
	)

	return ByteLanguages(queryMods...)
}

// LoadByteJet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (bytePilotL) LoadByteJet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBytePilot interface{}, mods queries.Applicator) error {
	var slice []*BytePilot
	var object *BytePilot

	if singular {
		var ok bool
		object, ok = maybeBytePilot.(*BytePilot)
		if !ok {
			object = new(BytePilot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBytePilot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBytePilot))
			}
		}
	} else {
		s, ok := maybeBytePilot.(*[]*BytePilot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBytePilot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBytePilot))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bytePilotR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bytePilotR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`byte_jets`),
		qm.WhereIn(`byte_jets.byte_pilot_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ByteJet")
	}

	var resultSlice []*ByteJet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ByteJet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for byte_jets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for byte_jets")
	}

	if len(byteJetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ByteJet = foreign
		if foreign.R == nil {
			foreign.R = &byteJetR{}
		}
		foreign.R.BytePilot = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.BytePilotID) {
				local.R.ByteJet = foreign
				if foreign.R == nil {
					foreign.R = &byteJetR{}
				}
				foreign.R.BytePilot = local
				break
			}
		}
	}

	return nil
}

// LoadByteLanguages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bytePilotL) LoadByteLanguages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBytePilot interface{}, mods queries.Applicator) error {
	var slice []*BytePilot
	var object *BytePilot

	if singular {
		var ok bool
		object, ok = maybeBytePilot.(*BytePilot)
		if !ok {
			object = new(BytePilot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBytePilot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBytePilot))
			}
		}
	} else {
		s, ok := maybeBytePilot.(*[]*BytePilot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBytePilot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBytePilot))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bytePilotR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bytePilotR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("`byte_languages`.`id`, `byte_languages`.`name`, `a`.`byte_pilot_id`"),
		qm.From("`byte_languages`"),
		qm.InnerJoin("`byte_pilot_languages` as `a` on `byte_languages`.`id` = `a`.`byte_language_id`"),
		qm.WhereIn("`a`.`byte_pilot_id` in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load byte_languages")
	}

	var resultSlice []*ByteLanguage

	var localJoinCols [][]byte
	for results.Next() {
		one := new(ByteLanguage)
		var localJoinCol []byte

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for byte_languages")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice byte_languages")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on byte_languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for byte_languages")
	}

	if len(byteLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ByteLanguages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &byteLanguageR{}
			}
			foreign.R.BytePilots = append(foreign.R.BytePilots, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.ByteLanguages = append(local.R.ByteLanguages, foreign)
				if foreign.R == nil {
					foreign.R = &byteLanguageR{}
				}
				foreign.R.BytePilots = append(foreign.R.BytePilots, local)
				break
			}
		}
	}

	return nil
}

// SetByteJet of the bytePilot to the related item.
// Sets o.R.ByteJet to related.
// Adds o to related.R.BytePilot.
func (o *BytePilot) SetByteJet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ByteJet) error {
	var err error

	if insert {
		queries.Assign(&related.BytePilotID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `byte_jets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"byte_pilot_id"}),
			strmangle.WhereClause("`", "`", 0, byteJetPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.BytePilotID, o.ID)
	}

	if o.R == nil {
		o.R = &bytePilotR{
			ByteJet: related,
		}
	} else {
		o.R.ByteJet = related
	}

	if related.R == nil {
		related.R = &byteJetR{
			BytePilot: o,
		}
	} else {
		related.R.BytePilot = o
	}
	return nil
}

// RemoveByteJet relationship.
// Sets o.R.ByteJet to nil.
// Removes o from all passed in related items' relationships struct.
func (o *BytePilot) RemoveByteJet(ctx context.Context, exec boil.ContextExecutor, related *ByteJet) error {
	var err error

	queries.SetScanner(&related.BytePilotID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("byte_pilot_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ByteJet = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.BytePilot = nil

	return nil
}

// AddByteLanguages adds the given related objects to the existing relationships
// of the byte_pilot, optionally inserting them as new records.
// Appends related to o.R.ByteLanguages.
// Sets related.R.BytePilots appropriately.
func (o *BytePilot) AddByteLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ByteLanguage) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `byte_pilot_languages` (`byte_pilot_id`, `byte_language_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &bytePilotR{
			ByteLanguages: related,
		}
	} else {
		o.R.ByteLanguages = append(o.R.ByteLanguages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &byteLanguageR{
				BytePilots: BytePilotSlice{o},
			}
		} else {
			rel.R.BytePilots = append(rel.R.BytePilots, o)
		}
	}
	return nil
}

// SetByteLanguages removes all previously related items of the
// byte_pilot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BytePilots's ByteLanguages accordingly.
// Replaces o.R.ByteLanguages with related.
// Sets related.R.BytePilots's ByteLanguages accordingly.
func (o *BytePilot) SetByteLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ByteLanguage) error {
	query := "delete from `byte_pilot_languages` where `byte_pilot_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeByteLanguagesFromBytePilotsSlice(o, related)
	if o.R != nil {
		o.R.ByteLanguages = nil
	}

	return o.AddByteLanguages(ctx, exec, insert, related...)
}

// RemoveByteLanguages relationships from objects passed in.
// Removes related items from R.ByteLanguages (uses pointer comparison, removal does not keep order)
// Sets related.R.BytePilots.
func (o *BytePilot) RemoveByteLanguages(ctx context.Context, exec boil.ContextExecutor, related ...*ByteLanguage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `byte_pilot_languages` where `byte_pilot_id` = ? and `byte_language_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeByteLanguagesFromBytePilotsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ByteLanguages {
			if rel != ri {
				continue
			}

			ln := len(o.R.ByteLanguages)
			if ln > 1 && i < ln-1 {
				o.R.ByteLanguages[i] = o.R.ByteLanguages[ln-1]
			}
			o.R.ByteLanguages = o.R.ByteLanguages[:ln-1]
			break
		}
	}

	return nil
}

func removeByteLanguagesFromBytePilotsSlice(o *BytePilot, related []*ByteLanguage) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.BytePilots {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.BytePilots)
			if ln > 1 && i < ln-1 {
				rel.R.BytePilots[i] = rel.R.BytePilots[ln-1]
			}
			rel.R.BytePilots = rel.R.BytePilots[:ln-1]
			break
		}
	}
}

// BytePilots retrieves all the records using an executor.
func BytePilots(mods ...qm.QueryMod) bytePilotQuery {
	mods = append(mods, qm.From("`byte_pilots`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`byte_pilots`.*"})
	}

	return bytePilotQuery{q}
}

// FindBytePilot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBytePilot(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*BytePilot, error) {
	bytePilotObj := &BytePilot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `byte_pilots` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bytePilotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from byte_pilots")
	}

	if err = bytePilotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bytePilotObj, err
	}

	return bytePilotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BytePilot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no byte_pilots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bytePilotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bytePilotInsertCacheMut.RLock()
	cache, cached := bytePilotInsertCache[key]
	bytePilotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bytePilotAllColumns,
			bytePilotColumnsWithDefault,
			bytePilotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bytePilotType, bytePilotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bytePilotType, bytePilotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `byte_pilots` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `byte_pilots` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `byte_pilots` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bytePilotPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into byte_pilots")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for byte_pilots")
	}

CacheNoHooks:
	if !cached {
		bytePilotInsertCacheMut.Lock()
		bytePilotInsertCache[key] = cache
		bytePilotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BytePilot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BytePilot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bytePilotUpdateCacheMut.RLock()
	cache, cached := bytePilotUpdateCache[key]
	bytePilotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bytePilotAllColumns,
			bytePilotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update byte_pilots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `byte_pilots` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bytePilotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bytePilotType, bytePilotMapping, append(wl, bytePilotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update byte_pilots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for byte_pilots")
	}

	if !cached {
		bytePilotUpdateCacheMut.Lock()
		bytePilotUpdateCache[key] = cache
		bytePilotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bytePilotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for byte_pilots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for byte_pilots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BytePilotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bytePilotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `byte_pilots` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bytePilotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bytePilot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bytePilot")
	}
	return rowsAff, nil
}

var mySQLBytePilotUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BytePilot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no byte_pilots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bytePilotColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBytePilotUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bytePilotUpsertCacheMut.RLock()
	cache, cached := bytePilotUpsertCache[key]
	bytePilotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bytePilotAllColumns,
			bytePilotColumnsWithDefault,
			bytePilotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bytePilotAllColumns,
			bytePilotPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert byte_pilots, could not build update column list")
		}

		ret := strmangle.SetComplement(bytePilotAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`byte_pilots`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `byte_pilots` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bytePilotType, bytePilotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bytePilotType, bytePilotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for byte_pilots")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bytePilotType, bytePilotMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for byte_pilots")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for byte_pilots")
	}

CacheNoHooks:
	if !cached {
		bytePilotUpsertCacheMut.Lock()
		bytePilotUpsertCache[key] = cache
		bytePilotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BytePilot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BytePilot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BytePilot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bytePilotPrimaryKeyMapping)
	sql := "DELETE FROM `byte_pilots` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from byte_pilots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for byte_pilots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bytePilotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bytePilotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from byte_pilots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for byte_pilots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BytePilotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bytePilotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bytePilotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `byte_pilots` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bytePilotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bytePilot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for byte_pilots")
	}

	if len(bytePilotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BytePilot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBytePilot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BytePilotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BytePilotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bytePilotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `byte_pilots`.* FROM `byte_pilots` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bytePilotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BytePilotSlice")
	}

	*o = slice

	return nil
}

// BytePilotExists checks if the BytePilot row exists.
func BytePilotExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `byte_pilots` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if byte_pilots exists")
	}

	return exists, nil
}

// Exists checks if the BytePilot row exists.
func (o *BytePilot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BytePilotExists(ctx, exec, o.ID)
}
