// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RaceResultScratching is an object representing the database table.
type RaceResultScratching struct {
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ResultsID int    `boil:"results_id" json:"results_id" toml:"results_id" yaml:"results_id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *raceResultScratchingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L raceResultScratchingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RaceResultScratchingColumns = struct {
	ID        string
	ResultsID string
	Name      string
}{
	ID:        "id",
	ResultsID: "results_id",
	Name:      "name",
}

var RaceResultScratchingTableColumns = struct {
	ID        string
	ResultsID string
	Name      string
}{
	ID:        "race_result_scratchings.id",
	ResultsID: "race_result_scratchings.results_id",
	Name:      "race_result_scratchings.name",
}

// Generated where

var RaceResultScratchingWhere = struct {
	ID        whereHelperint
	ResultsID whereHelperint
	Name      whereHelperstring
}{
	ID:        whereHelperint{field: "`race_result_scratchings`.`id`"},
	ResultsID: whereHelperint{field: "`race_result_scratchings`.`results_id`"},
	Name:      whereHelperstring{field: "`race_result_scratchings`.`name`"},
}

// RaceResultScratchingRels is where relationship names are stored.
var RaceResultScratchingRels = struct {
	Result string
}{
	Result: "Result",
}

// raceResultScratchingR is where relationships are stored.
type raceResultScratchingR struct {
	Result *RaceResult `boil:"Result" json:"Result" toml:"Result" yaml:"Result"`
}

// NewStruct creates a new relationship struct
func (*raceResultScratchingR) NewStruct() *raceResultScratchingR {
	return &raceResultScratchingR{}
}

func (r *raceResultScratchingR) GetResult() *RaceResult {
	if r == nil {
		return nil
	}
	return r.Result
}

// raceResultScratchingL is where Load methods for each relationship are stored.
type raceResultScratchingL struct{}

var (
	raceResultScratchingAllColumns            = []string{"id", "results_id", "name"}
	raceResultScratchingColumnsWithoutDefault = []string{"id", "results_id", "name"}
	raceResultScratchingColumnsWithDefault    = []string{}
	raceResultScratchingPrimaryKeyColumns     = []string{"id"}
	raceResultScratchingGeneratedColumns      = []string{}
)

type (
	// RaceResultScratchingSlice is an alias for a slice of pointers to RaceResultScratching.
	// This should almost always be used instead of []RaceResultScratching.
	RaceResultScratchingSlice []*RaceResultScratching
	// RaceResultScratchingHook is the signature for custom RaceResultScratching hook methods
	RaceResultScratchingHook func(context.Context, boil.ContextExecutor, *RaceResultScratching) error

	raceResultScratchingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	raceResultScratchingType                 = reflect.TypeOf(&RaceResultScratching{})
	raceResultScratchingMapping              = queries.MakeStructMapping(raceResultScratchingType)
	raceResultScratchingPrimaryKeyMapping, _ = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, raceResultScratchingPrimaryKeyColumns)
	raceResultScratchingInsertCacheMut       sync.RWMutex
	raceResultScratchingInsertCache          = make(map[string]insertCache)
	raceResultScratchingUpdateCacheMut       sync.RWMutex
	raceResultScratchingUpdateCache          = make(map[string]updateCache)
	raceResultScratchingUpsertCacheMut       sync.RWMutex
	raceResultScratchingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var raceResultScratchingAfterSelectMu sync.Mutex
var raceResultScratchingAfterSelectHooks []RaceResultScratchingHook

var raceResultScratchingBeforeInsertMu sync.Mutex
var raceResultScratchingBeforeInsertHooks []RaceResultScratchingHook
var raceResultScratchingAfterInsertMu sync.Mutex
var raceResultScratchingAfterInsertHooks []RaceResultScratchingHook

var raceResultScratchingBeforeUpdateMu sync.Mutex
var raceResultScratchingBeforeUpdateHooks []RaceResultScratchingHook
var raceResultScratchingAfterUpdateMu sync.Mutex
var raceResultScratchingAfterUpdateHooks []RaceResultScratchingHook

var raceResultScratchingBeforeDeleteMu sync.Mutex
var raceResultScratchingBeforeDeleteHooks []RaceResultScratchingHook
var raceResultScratchingAfterDeleteMu sync.Mutex
var raceResultScratchingAfterDeleteHooks []RaceResultScratchingHook

var raceResultScratchingBeforeUpsertMu sync.Mutex
var raceResultScratchingBeforeUpsertHooks []RaceResultScratchingHook
var raceResultScratchingAfterUpsertMu sync.Mutex
var raceResultScratchingAfterUpsertHooks []RaceResultScratchingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RaceResultScratching) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RaceResultScratching) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RaceResultScratching) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RaceResultScratching) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RaceResultScratching) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RaceResultScratching) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RaceResultScratching) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RaceResultScratching) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RaceResultScratching) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range raceResultScratchingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRaceResultScratchingHook registers your hook function for all future operations.
func AddRaceResultScratchingHook(hookPoint boil.HookPoint, raceResultScratchingHook RaceResultScratchingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		raceResultScratchingAfterSelectMu.Lock()
		raceResultScratchingAfterSelectHooks = append(raceResultScratchingAfterSelectHooks, raceResultScratchingHook)
		raceResultScratchingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		raceResultScratchingBeforeInsertMu.Lock()
		raceResultScratchingBeforeInsertHooks = append(raceResultScratchingBeforeInsertHooks, raceResultScratchingHook)
		raceResultScratchingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		raceResultScratchingAfterInsertMu.Lock()
		raceResultScratchingAfterInsertHooks = append(raceResultScratchingAfterInsertHooks, raceResultScratchingHook)
		raceResultScratchingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		raceResultScratchingBeforeUpdateMu.Lock()
		raceResultScratchingBeforeUpdateHooks = append(raceResultScratchingBeforeUpdateHooks, raceResultScratchingHook)
		raceResultScratchingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		raceResultScratchingAfterUpdateMu.Lock()
		raceResultScratchingAfterUpdateHooks = append(raceResultScratchingAfterUpdateHooks, raceResultScratchingHook)
		raceResultScratchingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		raceResultScratchingBeforeDeleteMu.Lock()
		raceResultScratchingBeforeDeleteHooks = append(raceResultScratchingBeforeDeleteHooks, raceResultScratchingHook)
		raceResultScratchingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		raceResultScratchingAfterDeleteMu.Lock()
		raceResultScratchingAfterDeleteHooks = append(raceResultScratchingAfterDeleteHooks, raceResultScratchingHook)
		raceResultScratchingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		raceResultScratchingBeforeUpsertMu.Lock()
		raceResultScratchingBeforeUpsertHooks = append(raceResultScratchingBeforeUpsertHooks, raceResultScratchingHook)
		raceResultScratchingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		raceResultScratchingAfterUpsertMu.Lock()
		raceResultScratchingAfterUpsertHooks = append(raceResultScratchingAfterUpsertHooks, raceResultScratchingHook)
		raceResultScratchingAfterUpsertMu.Unlock()
	}
}

// One returns a single raceResultScratching record from the query.
func (q raceResultScratchingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RaceResultScratching, error) {
	o := &RaceResultScratching{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for race_result_scratchings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RaceResultScratching records from the query.
func (q raceResultScratchingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RaceResultScratchingSlice, error) {
	var o []*RaceResultScratching

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RaceResultScratching slice")
	}

	if len(raceResultScratchingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RaceResultScratching records in the query.
func (q raceResultScratchingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count race_result_scratchings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q raceResultScratchingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if race_result_scratchings exists")
	}

	return count > 0, nil
}

// Result pointed to by the foreign key.
func (o *RaceResultScratching) Result(mods ...qm.QueryMod) raceResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ResultsID),
	}

	queryMods = append(queryMods, mods...)

	return RaceResults(queryMods...)
}

// LoadResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (raceResultScratchingL) LoadResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRaceResultScratching interface{}, mods queries.Applicator) error {
	var slice []*RaceResultScratching
	var object *RaceResultScratching

	if singular {
		var ok bool
		object, ok = maybeRaceResultScratching.(*RaceResultScratching)
		if !ok {
			object = new(RaceResultScratching)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRaceResultScratching)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRaceResultScratching))
			}
		}
	} else {
		s, ok := maybeRaceResultScratching.(*[]*RaceResultScratching)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRaceResultScratching)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRaceResultScratching))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &raceResultScratchingR{}
		}
		args[object.ResultsID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &raceResultScratchingR{}
			}

			args[obj.ResultsID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`race_results`),
		qm.WhereIn(`race_results.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RaceResult")
	}

	var resultSlice []*RaceResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RaceResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for race_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for race_results")
	}

	if len(raceResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Result = foreign
		if foreign.R == nil {
			foreign.R = &raceResultR{}
		}
		foreign.R.ResultRaceResultScratchings = append(foreign.R.ResultRaceResultScratchings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResultsID == foreign.ID {
				local.R.Result = foreign
				if foreign.R == nil {
					foreign.R = &raceResultR{}
				}
				foreign.R.ResultRaceResultScratchings = append(foreign.R.ResultRaceResultScratchings, local)
				break
			}
		}
	}

	return nil
}

// SetResult of the raceResultScratching to the related item.
// Sets o.R.Result to related.
// Adds o to related.R.ResultRaceResultScratchings.
func (o *RaceResultScratching) SetResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RaceResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `race_result_scratchings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"results_id"}),
		strmangle.WhereClause("`", "`", 0, raceResultScratchingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResultsID = related.ID
	if o.R == nil {
		o.R = &raceResultScratchingR{
			Result: related,
		}
	} else {
		o.R.Result = related
	}

	if related.R == nil {
		related.R = &raceResultR{
			ResultRaceResultScratchings: RaceResultScratchingSlice{o},
		}
	} else {
		related.R.ResultRaceResultScratchings = append(related.R.ResultRaceResultScratchings, o)
	}

	return nil
}

// RaceResultScratchings retrieves all the records using an executor.
func RaceResultScratchings(mods ...qm.QueryMod) raceResultScratchingQuery {
	mods = append(mods, qm.From("`race_result_scratchings`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`race_result_scratchings`.*"})
	}

	return raceResultScratchingQuery{q}
}

// FindRaceResultScratching retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRaceResultScratching(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RaceResultScratching, error) {
	raceResultScratchingObj := &RaceResultScratching{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `race_result_scratchings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, raceResultScratchingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from race_result_scratchings")
	}

	if err = raceResultScratchingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return raceResultScratchingObj, err
	}

	return raceResultScratchingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RaceResultScratching) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no race_result_scratchings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(raceResultScratchingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	raceResultScratchingInsertCacheMut.RLock()
	cache, cached := raceResultScratchingInsertCache[key]
	raceResultScratchingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			raceResultScratchingAllColumns,
			raceResultScratchingColumnsWithDefault,
			raceResultScratchingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `race_result_scratchings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `race_result_scratchings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `race_result_scratchings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, raceResultScratchingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into race_result_scratchings")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for race_result_scratchings")
	}

CacheNoHooks:
	if !cached {
		raceResultScratchingInsertCacheMut.Lock()
		raceResultScratchingInsertCache[key] = cache
		raceResultScratchingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RaceResultScratching.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RaceResultScratching) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	raceResultScratchingUpdateCacheMut.RLock()
	cache, cached := raceResultScratchingUpdateCache[key]
	raceResultScratchingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			raceResultScratchingAllColumns,
			raceResultScratchingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update race_result_scratchings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `race_result_scratchings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, raceResultScratchingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, append(wl, raceResultScratchingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update race_result_scratchings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for race_result_scratchings")
	}

	if !cached {
		raceResultScratchingUpdateCacheMut.Lock()
		raceResultScratchingUpdateCache[key] = cache
		raceResultScratchingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q raceResultScratchingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for race_result_scratchings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for race_result_scratchings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RaceResultScratchingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raceResultScratchingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `race_result_scratchings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, raceResultScratchingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in raceResultScratching slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all raceResultScratching")
	}
	return rowsAff, nil
}

var mySQLRaceResultScratchingUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RaceResultScratching) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no race_result_scratchings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(raceResultScratchingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRaceResultScratchingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	raceResultScratchingUpsertCacheMut.RLock()
	cache, cached := raceResultScratchingUpsertCache[key]
	raceResultScratchingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			raceResultScratchingAllColumns,
			raceResultScratchingColumnsWithDefault,
			raceResultScratchingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			raceResultScratchingAllColumns,
			raceResultScratchingPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert race_result_scratchings, could not build update column list")
		}

		ret := strmangle.SetComplement(raceResultScratchingAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`race_result_scratchings`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `race_result_scratchings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for race_result_scratchings")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(raceResultScratchingType, raceResultScratchingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for race_result_scratchings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for race_result_scratchings")
	}

CacheNoHooks:
	if !cached {
		raceResultScratchingUpsertCacheMut.Lock()
		raceResultScratchingUpsertCache[key] = cache
		raceResultScratchingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RaceResultScratching record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RaceResultScratching) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RaceResultScratching provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), raceResultScratchingPrimaryKeyMapping)
	sql := "DELETE FROM `race_result_scratchings` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from race_result_scratchings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for race_result_scratchings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q raceResultScratchingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no raceResultScratchingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from race_result_scratchings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for race_result_scratchings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RaceResultScratchingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(raceResultScratchingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raceResultScratchingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `race_result_scratchings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, raceResultScratchingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from raceResultScratching slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for race_result_scratchings")
	}

	if len(raceResultScratchingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RaceResultScratching) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRaceResultScratching(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RaceResultScratchingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RaceResultScratchingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raceResultScratchingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `race_result_scratchings`.* FROM `race_result_scratchings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, raceResultScratchingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RaceResultScratchingSlice")
	}

	*o = slice

	return nil
}

// RaceResultScratchingExists checks if the RaceResultScratching row exists.
func RaceResultScratchingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `race_result_scratchings` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if race_result_scratchings exists")
	}

	return exists, nil
}

// Exists checks if the RaceResultScratching row exists.
func (o *RaceResultScratching) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RaceResultScratchingExists(ctx, exec, o.ID)
}
