// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Cat is an object representing the database table.
type Cat struct {
	ID      int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	OwnerID null.Int `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`

	R *catR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L catL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CatColumns = struct {
	ID      string
	Name    string
	OwnerID string
}{
	ID:      "id",
	Name:    "name",
	OwnerID: "owner_id",
}

var CatTableColumns = struct {
	ID      string
	Name    string
	OwnerID string
}{
	ID:      "cats.id",
	Name:    "cats.name",
	OwnerID: "cats.owner_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CatWhere = struct {
	ID      whereHelperint
	Name    whereHelperstring
	OwnerID whereHelpernull_Int
}{
	ID:      whereHelperint{field: "`cats`.`id`"},
	Name:    whereHelperstring{field: "`cats`.`name`"},
	OwnerID: whereHelpernull_Int{field: "`cats`.`owner_id`"},
}

// CatRels is where relationship names are stored.
var CatRels = struct {
	Owner string
	Toys  string
}{
	Owner: "Owner",
	Toys:  "Toys",
}

// catR is where relationships are stored.
type catR struct {
	Owner *Owner   `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Toys  ToySlice `boil:"Toys" json:"Toys" toml:"Toys" yaml:"Toys"`
}

// NewStruct creates a new relationship struct
func (*catR) NewStruct() *catR {
	return &catR{}
}

func (r *catR) GetOwner() *Owner {
	if r == nil {
		return nil
	}
	return r.Owner
}

func (r *catR) GetToys() ToySlice {
	if r == nil {
		return nil
	}
	return r.Toys
}

// catL is where Load methods for each relationship are stored.
type catL struct{}

var (
	catAllColumns            = []string{"id", "name", "owner_id"}
	catColumnsWithoutDefault = []string{"name", "owner_id"}
	catColumnsWithDefault    = []string{"id"}
	catPrimaryKeyColumns     = []string{"id"}
	catGeneratedColumns      = []string{}
)

type (
	// CatSlice is an alias for a slice of pointers to Cat.
	// This should almost always be used instead of []Cat.
	CatSlice []*Cat
	// CatHook is the signature for custom Cat hook methods
	CatHook func(context.Context, boil.ContextExecutor, *Cat) error

	catQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	catType                 = reflect.TypeOf(&Cat{})
	catMapping              = queries.MakeStructMapping(catType)
	catPrimaryKeyMapping, _ = queries.BindMapping(catType, catMapping, catPrimaryKeyColumns)
	catInsertCacheMut       sync.RWMutex
	catInsertCache          = make(map[string]insertCache)
	catUpdateCacheMut       sync.RWMutex
	catUpdateCache          = make(map[string]updateCache)
	catUpsertCacheMut       sync.RWMutex
	catUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var catAfterSelectMu sync.Mutex
var catAfterSelectHooks []CatHook

var catBeforeInsertMu sync.Mutex
var catBeforeInsertHooks []CatHook
var catAfterInsertMu sync.Mutex
var catAfterInsertHooks []CatHook

var catBeforeUpdateMu sync.Mutex
var catBeforeUpdateHooks []CatHook
var catAfterUpdateMu sync.Mutex
var catAfterUpdateHooks []CatHook

var catBeforeDeleteMu sync.Mutex
var catBeforeDeleteHooks []CatHook
var catAfterDeleteMu sync.Mutex
var catAfterDeleteHooks []CatHook

var catBeforeUpsertMu sync.Mutex
var catBeforeUpsertHooks []CatHook
var catAfterUpsertMu sync.Mutex
var catAfterUpsertHooks []CatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Cat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Cat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Cat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Cat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Cat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Cat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Cat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Cat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Cat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCatHook registers your hook function for all future operations.
func AddCatHook(hookPoint boil.HookPoint, catHook CatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		catAfterSelectMu.Lock()
		catAfterSelectHooks = append(catAfterSelectHooks, catHook)
		catAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		catBeforeInsertMu.Lock()
		catBeforeInsertHooks = append(catBeforeInsertHooks, catHook)
		catBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		catAfterInsertMu.Lock()
		catAfterInsertHooks = append(catAfterInsertHooks, catHook)
		catAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		catBeforeUpdateMu.Lock()
		catBeforeUpdateHooks = append(catBeforeUpdateHooks, catHook)
		catBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		catAfterUpdateMu.Lock()
		catAfterUpdateHooks = append(catAfterUpdateHooks, catHook)
		catAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		catBeforeDeleteMu.Lock()
		catBeforeDeleteHooks = append(catBeforeDeleteHooks, catHook)
		catBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		catAfterDeleteMu.Lock()
		catAfterDeleteHooks = append(catAfterDeleteHooks, catHook)
		catAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		catBeforeUpsertMu.Lock()
		catBeforeUpsertHooks = append(catBeforeUpsertHooks, catHook)
		catBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		catAfterUpsertMu.Lock()
		catAfterUpsertHooks = append(catAfterUpsertHooks, catHook)
		catAfterUpsertMu.Unlock()
	}
}

// One returns a single cat record from the query.
func (q catQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Cat, error) {
	o := &Cat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Cat records from the query.
func (q catQuery) All(ctx context.Context, exec boil.ContextExecutor) (CatSlice, error) {
	var o []*Cat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Cat slice")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Cat records in the query.
func (q catQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q catQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cats exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Cat) Owner(mods ...qm.QueryMod) ownerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Owners(queryMods...)
}

// Toys retrieves all the toy's Toys with an executor.
func (o *Cat) Toys(mods ...qm.QueryMod) toyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`cat_toys` on `toys`.`id` = `cat_toys`.`toy_id`"),
		qm.Where("`cat_toys`.`cat_id`=?", o.ID),
	)

	return Toys(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (catL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCat interface{}, mods queries.Applicator) error {
	var slice []*Cat
	var object *Cat

	if singular {
		var ok bool
		object, ok = maybeCat.(*Cat)
		if !ok {
			object = new(Cat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCat))
			}
		}
	} else {
		s, ok := maybeCat.(*[]*Cat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &catR{}
		}
		if !queries.IsNil(object.OwnerID) {
			args[object.OwnerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catR{}
			}

			if !queries.IsNil(obj.OwnerID) {
				args[obj.OwnerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`owner`),
		qm.WhereIn(`owner.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Owner")
	}

	var resultSlice []*Owner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Owner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for owner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for owner")
	}

	if len(ownerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &ownerR{}
		}
		foreign.R.Cats = append(foreign.R.Cats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerID, foreign.ID) {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &ownerR{}
				}
				foreign.R.Cats = append(foreign.R.Cats, local)
				break
			}
		}
	}

	return nil
}

// LoadToys allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (catL) LoadToys(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCat interface{}, mods queries.Applicator) error {
	var slice []*Cat
	var object *Cat

	if singular {
		var ok bool
		object, ok = maybeCat.(*Cat)
		if !ok {
			object = new(Cat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCat))
			}
		}
	} else {
		s, ok := maybeCat.(*[]*Cat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &catR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("`toys`.`id`, `toys`.`name`, `a`.`cat_id`"),
		qm.From("`toys`"),
		qm.InnerJoin("`cat_toys` as `a` on `toys`.`id` = `a`.`toy_id`"),
		qm.WhereIn("`a`.`cat_id` in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load toys")
	}

	var resultSlice []*Toy

	var localJoinCols []int
	for results.Next() {
		one := new(Toy)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for toys")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice toys")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on toys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for toys")
	}

	if len(toyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Toys = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &toyR{}
			}
			foreign.R.Cats = append(foreign.R.Cats, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Toys = append(local.R.Toys, foreign)
				if foreign.R == nil {
					foreign.R = &toyR{}
				}
				foreign.R.Cats = append(foreign.R.Cats, local)
				break
			}
		}
	}

	return nil
}

// SetOwner of the cat to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.Cats.
func (o *Cat) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Owner) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `cats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"owner_id"}),
		strmangle.WhereClause("`", "`", 0, catPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerID, related.ID)
	if o.R == nil {
		o.R = &catR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &ownerR{
			Cats: CatSlice{o},
		}
	} else {
		related.R.Cats = append(related.R.Cats, o)
	}

	return nil
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Cat) RemoveOwner(ctx context.Context, exec boil.ContextExecutor, related *Owner) error {
	var err error

	queries.SetScanner(&o.OwnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Owner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Cats {
		if queries.Equal(o.OwnerID, ri.OwnerID) {
			continue
		}

		ln := len(related.R.Cats)
		if ln > 1 && i < ln-1 {
			related.R.Cats[i] = related.R.Cats[ln-1]
		}
		related.R.Cats = related.R.Cats[:ln-1]
		break
	}
	return nil
}

// AddToys adds the given related objects to the existing relationships
// of the cat, optionally inserting them as new records.
// Appends related to o.R.Toys.
// Sets related.R.Cats appropriately.
func (o *Cat) AddToys(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Toy) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `cat_toys` (`cat_id`, `toy_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &catR{
			Toys: related,
		}
	} else {
		o.R.Toys = append(o.R.Toys, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &toyR{
				Cats: CatSlice{o},
			}
		} else {
			rel.R.Cats = append(rel.R.Cats, o)
		}
	}
	return nil
}

// SetToys removes all previously related items of the
// cat replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Cats's Toys accordingly.
// Replaces o.R.Toys with related.
// Sets related.R.Cats's Toys accordingly.
func (o *Cat) SetToys(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Toy) error {
	query := "delete from `cat_toys` where `cat_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeToysFromCatsSlice(o, related)
	if o.R != nil {
		o.R.Toys = nil
	}

	return o.AddToys(ctx, exec, insert, related...)
}

// RemoveToys relationships from objects passed in.
// Removes related items from R.Toys (uses pointer comparison, removal does not keep order)
// Sets related.R.Cats.
func (o *Cat) RemoveToys(ctx context.Context, exec boil.ContextExecutor, related ...*Toy) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `cat_toys` where `cat_id` = ? and `toy_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeToysFromCatsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Toys {
			if rel != ri {
				continue
			}

			ln := len(o.R.Toys)
			if ln > 1 && i < ln-1 {
				o.R.Toys[i] = o.R.Toys[ln-1]
			}
			o.R.Toys = o.R.Toys[:ln-1]
			break
		}
	}

	return nil
}

func removeToysFromCatsSlice(o *Cat, related []*Toy) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Cats {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Cats)
			if ln > 1 && i < ln-1 {
				rel.R.Cats[i] = rel.R.Cats[ln-1]
			}
			rel.R.Cats = rel.R.Cats[:ln-1]
			break
		}
	}
}

// Cats retrieves all the records using an executor.
func Cats(mods ...qm.QueryMod) catQuery {
	mods = append(mods, qm.From("`cats`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`cats`.*"})
	}

	return catQuery{q}
}

// FindCat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Cat, error) {
	catObj := &Cat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cats` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, catObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cats")
	}

	if err = catObj.doAfterSelectHooks(ctx, exec); err != nil {
		return catObj, err
	}

	return catObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Cat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	catInsertCacheMut.RLock()
	cache, cached := catInsertCache[key]
	catInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			catAllColumns,
			catColumnsWithDefault,
			catColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(catType, catMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(catType, catMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cats` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cats` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cats` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, catPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cats")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == catMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cats")
	}

CacheNoHooks:
	if !cached {
		catInsertCacheMut.Lock()
		catInsertCache[key] = cache
		catInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Cat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Cat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	catUpdateCacheMut.RLock()
	cache, cached := catUpdateCache[key]
	catUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			catAllColumns,
			catPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cats` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, catPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(catType, catMapping, append(wl, catPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cats")
	}

	if !cached {
		catUpdateCacheMut.Lock()
		catUpdateCache[key] = cache
		catUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q catQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, catPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cat")
	}
	return rowsAff, nil
}

var mySQLCatUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Cat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	catUpsertCacheMut.RLock()
	cache, cached := catUpsertCache[key]
	catUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			catAllColumns,
			catColumnsWithDefault,
			catColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			catAllColumns,
			catPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cats, could not build update column list")
		}

		ret := strmangle.SetComplement(catAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`cats`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cats` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(catType, catMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(catType, catMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cats")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == catMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(catType, catMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cats")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cats")
	}

CacheNoHooks:
	if !cached {
		catUpsertCacheMut.Lock()
		catUpsertCache[key] = cache
		catUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Cat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Cat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Cat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), catPrimaryKeyMapping)
	sql := "DELETE FROM `cats` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q catQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no catQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(catBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, catPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cats")
	}

	if len(catAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Cat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cats`.* FROM `cats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, catPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CatSlice")
	}

	*o = slice

	return nil
}

// CatExists checks if the Cat row exists.
func CatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cats` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cats exists")
	}

	return exists, nil
}

// Exists checks if the Cat row exists.
func (o *Cat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CatExists(ctx, exec, o.ID)
}
